{
    "project": {
        "name": "Documenting JavaScript with YUIDoc",
        "description": "A tutorial about YUIDoc, for Nettuts+",
        "version": "1.0.0",
        "url": "http://net.tutsplus.com"
    },
    "files": {
        "js\\controllers.js": {
            "name": "js\\controllers.js",
            "modules": {},
            "classes": {
                "ChatsCtrl": 1,
                "ChatsDetailCtrl": 1,
                "ChatsAddCtrl": 1,
                "ChatsBuy": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\parse-1.4.2.js": {
            "name": "js\\parse-1.4.2.js",
            "modules": {},
            "classes": {
                "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.": 1,
                "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>": 1,
                "Provides an interface to Parse's logging and analytics backend..<p>Parse.Events is a fork of Backbone's Events module, provided for your\nconvenience.</p>\n\n<p>A module that can be mixed in to any object in order to provide\nit with custom events. You may bind callback functions to an event\nwith `on`, or remove these functions with `off`.\nTriggering an event fires all callbacks in the order that `on` was\ncalled.\n\n<pre>\n    var object = {};\n    _.extend(object, Parse.Events);\n    object.on('expand', function(){ alert('expanded'); });\n    object.trigger('expand');</pre></p>\n\n<p>For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Events\">Backbone\ndocumentation</a>.</p>": 1,
                "Provides an interface to Parse's logging and analytics backend..<p>Represents a latitude / longitude point that may be associated\nwith a key in a ParseObject or used as a reference point for geo queries.\nThis allows proximity-based queries on the key.</p>\n\n<p>Only one key in a class may contain a GeoPoint.</p>\n\n<p>Example:<pre>\n  var point = new Parse.GeoPoint(30.0, -20.0);\n  var object = new Parse.Object(\"PlaceObject\");\n  object.set(\"location\", point);\n  object.save();</pre></p>": 1,
                "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>": 1,
                "Provides an interface to Parse's logging and analytics backend..A Parse.Op is an atomic operation that can be applied to a field in a\nParse.Object. For example, calling <code>object.set(\"foo\", \"bar\")</code>\nis an example of a Parse.Op.Set. Calling <code>object.unset(\"foo\")</code>\nis a Parse.Op.Unset. These operations are stored in a Parse.Object and\nsent to the server as part of <code>object.save()</code> operations.\nInstances of Parse.Op should be immutable.\n\nYou should not create subclasses of Parse.Op or instantiate Parse.Op\ndirectly.": 1,
                "Provides an interface to Parse's logging and analytics backend..A Set operation indicates that either the field was changed using\nParse.Object.set, or it is a mutable container that was detected as being\nchanged.": 1,
                "Provides an interface to Parse's logging and analytics backend..An Unset operation indicates that this field has been deleted from the\nobject.": 1,
                "Provides an interface to Parse's logging and analytics backend..An Increment is an atomic operation where the numeric value for the field\nwill be increased by a given amount.": 1,
                "Provides an interface to Parse's logging and analytics backend..Add is an atomic operation where the given objects will be appended to the\narray that is stored in this field.": 1,
                "Provides an interface to Parse's logging and analytics backend..AddUnique is an atomic operation where the given items will be appended to\nthe array that is stored in this field only if they were not already\npresent in the array.": 1,
                "Provides an interface to Parse's logging and analytics backend..Remove is an atomic operation where the given objects will be removed from\nthe array that is stored in this field.": 1,
                "Provides an interface to Parse's logging and analytics backend..A Relation operation indicates that the field is an instance of\nParse.Relation, and objects are being added to, or removed from, that\nrelation.": 1,
                "Provides an interface to Parse's logging and analytics backend..<p>\nA class that is used to access all of the children of a many-to-many\nrelationship.  Each instance of Parse.Relation is associated with a\nparticular parent object and key.\n</p>": 1,
                "": 1,
                "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>": 1,
                "Provides an interface to Parse's logging and analytics backend..A Parse.Role is a local representation of a role persisted to the Parse\ncloud.": 1,
                "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>": 1,
                "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>": 1,
                "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>": 1,
                "Provides an interface to Parse's logging and analytics backend..<p>A Parse.Session object is a local representation of a revocable session.\nThis class is a subclass of a Parse.Object, and retains the same\nfunctionality of a Parse.Object.</p>": 1,
                "Provides a set of utilities for using Parse with Facebook..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>": 1,
                "Provides a set of utilities for using Parse with Facebook..<p>A fork of Backbone.History, provided for your convenience.  If you \nuse this class, you must also include jQuery, or another library \nthat provides a jQuery-compatible $ function.  For more information,\nsee the <a href=\"http://documentcloud.github.com/backbone/#History\">\nBackbone documentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>": 1,
                "Contains functions for calling and declaring\n<a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n<p><strong><em>\n  Some functions are only available from Cloud Code.\n</em></strong></p>.<p>A fork of Backbone.Router, provided for your convenience.\nFor more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>": 1
            },
            "fors": {},
            "namespaces": {
                "Contains all Parse API classes and functions.": 1,
                "Provides an interface to Parse's logging and analytics backend.": 1,
                "Provides a set of utilities for using Parse with Facebook.": 1,
                "Contains functions for calling and declaring\n<a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n<p><strong><em>\n  Some functions are only available from Cloud Code.\n</em></strong></p>": 1
            }
        },
        "js\\services.js": {
            "name": "js\\services.js",
            "modules": {},
            "classes": {
                "Usuarios": 1,
                "Chats": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "ChatsCtrl": {
            "name": "ChatsCtrl",
            "shortname": "ChatsCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\controllers.js",
            "line": 5,
            "description": "Manejo de la pagina de muestra de los chats"
        },
        "ChatsDetailCtrl": {
            "name": "ChatsDetailCtrl",
            "shortname": "ChatsDetailCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\controllers.js",
            "line": 41,
            "description": "Manejo de la pagina para el detalle del Chat"
        },
        "ChatsAddCtrl": {
            "name": "ChatsAddCtrl",
            "shortname": "ChatsAddCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\controllers.js",
            "line": 76,
            "description": "Manejo de la pagina para agregar chats"
        },
        "ChatsBuy": {
            "name": "ChatsBuy",
            "shortname": "ChatsBuy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\controllers.js",
            "line": 117,
            "description": "Manejo de la pagina para realizar las compras"
        },
        "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.": {
            "name": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "shortname": "Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 2131
        },
        "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>": {
            "name": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "shortname": "<p>Class used for all objects passed to error callbacks.</p>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 2253,
            "description": "Constructs a new Parse.Error object with the given code and message.",
            "params": [
                {
                    "name": "code",
                    "description": "An error code constant from <code>Parse.Error</code>.",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "A detailed description of the error.",
                    "type": "String"
                }
            ]
        },
        "Provides an interface to Parse's logging and analytics backend..<p>Parse.Events is a fork of Backbone's Events module, provided for your\nconvenience.</p>\n\n<p>A module that can be mixed in to any object in order to provide\nit with custom events. You may bind callback functions to an event\nwith `on`, or remove these functions with `off`.\nTriggering an event fires all callbacks in the order that `on` was\ncalled.\n\n<pre>\n    var object = {};\n    _.extend(object, Parse.Events);\n    object.on('expand', function(){ alert('expanded'); });\n    object.trigger('expand');</pre></p>\n\n<p>For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Events\">Backbone\ndocumentation</a>.</p>": {
            "name": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Events is a fork of Backbone's Events module, provided for your\nconvenience.</p>\n\n<p>A module that can be mixed in to any object in order to provide\nit with custom events. You may bind callback functions to an event\nwith `on`, or remove these functions with `off`.\nTriggering an event fires all callbacks in the order that `on` was\ncalled.\n\n<pre>\n    var object = {};\n    _.extend(object, Parse.Events);\n    object.on('expand', function(){ alert('expanded'); });\n    object.trigger('expand');</pre></p>\n\n<p>For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Events\">Backbone\ndocumentation</a>.</p>",
            "shortname": "<p>Parse.Events is a fork of Backbone's Events module, provided for your\nconvenience.</p>\n\n<p>A module that can be mixed in to any object in order to provide\nit with custom events. You may bind callback functions to an event\nwith `on`, or remove these functions with `off`.\nTriggering an event fires all callbacks in the order that `on` was\ncalled.\n\n<pre>\n    var object = {};\n    _.extend(object, Parse.Events);\n    object.on('expand', function(){ alert('expanded'); });\n    object.trigger('expand');</pre></p>\n\n<p>For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Events\">Backbone\ndocumentation</a>.</p>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 2634
        },
        "Provides an interface to Parse's logging and analytics backend..<p>Represents a latitude / longitude point that may be associated\nwith a key in a ParseObject or used as a reference point for geo queries.\nThis allows proximity-based queries on the key.</p>\n\n<p>Only one key in a class may contain a GeoPoint.</p>\n\n<p>Example:<pre>\n  var point = new Parse.GeoPoint(30.0, -20.0);\n  var object = new Parse.Object(\"PlaceObject\");\n  object.set(\"location\", point);\n  object.save();</pre></p>": {
            "name": "Provides an interface to Parse's logging and analytics backend..<p>Represents a latitude / longitude point that may be associated\nwith a key in a ParseObject or used as a reference point for geo queries.\nThis allows proximity-based queries on the key.</p>\n\n<p>Only one key in a class may contain a GeoPoint.</p>\n\n<p>Example:<pre>\n  var point = new Parse.GeoPoint(30.0, -20.0);\n  var object = new Parse.Object(\"PlaceObject\");\n  object.set(\"location\", point);\n  object.save();</pre></p>",
            "shortname": "<p>Represents a latitude / longitude point that may be associated\nwith a key in a ParseObject or used as a reference point for geo queries.\nThis allows proximity-based queries on the key.</p>\n\n<p>Only one key in a class may contain a GeoPoint.</p>\n\n<p>Example:<pre>\n  var point = new Parse.GeoPoint(30.0, -20.0);\n  var object = new Parse.Object(\"PlaceObject\");\n  object.set(\"location\", point);\n  object.save();</pre></p>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 2791,
            "description": "Creates a new GeoPoint with any of the following forms:<br>\n  <pre>\n  new GeoPoint(otherGeoPoint)\n  new GeoPoint(30, 30)\n  new GeoPoint([30, 30])\n  new GeoPoint({latitude: 30, longitude: 30})\n  new GeoPoint()  // defaults to (0, 0)\n  </pre>"
        },
        "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>": {
            "name": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "shortname": "<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 2968,
            "description": "Creates a new ACL.\nIf no argument is given, the ACL has no permissions for anyone.\nIf the argument is a Parse.User, the ACL will have read and write\n  permission for only that user.\nIf the argument is any other JSON object, that object will be interpretted\n  as a serialized ACL created with toJSON().",
            "see": [
                "Parse.Object#setACL"
            ]
        },
        "Provides an interface to Parse's logging and analytics backend..A Parse.Op is an atomic operation that can be applied to a field in a\nParse.Object. For example, calling <code>object.set(\"foo\", \"bar\")</code>\nis an example of a Parse.Op.Set. Calling <code>object.unset(\"foo\")</code>\nis a Parse.Op.Unset. These operations are stored in a Parse.Object and\nsent to the server as part of <code>object.save()</code> operations.\nInstances of Parse.Op should be immutable.\n\nYou should not create subclasses of Parse.Op or instantiate Parse.Op\ndirectly.": {
            "name": "Provides an interface to Parse's logging and analytics backend..A Parse.Op is an atomic operation that can be applied to a field in a\nParse.Object. For example, calling <code>object.set(\"foo\", \"bar\")</code>\nis an example of a Parse.Op.Set. Calling <code>object.unset(\"foo\")</code>\nis a Parse.Op.Unset. These operations are stored in a Parse.Object and\nsent to the server as part of <code>object.save()</code> operations.\nInstances of Parse.Op should be immutable.\n\nYou should not create subclasses of Parse.Op or instantiate Parse.Op\ndirectly.",
            "shortname": "A Parse.Op is an atomic operation that can be applied to a field in a\nParse.Object. For example, calling <code>object.set(\"foo\", \"bar\")</code>\nis an example of a Parse.Op.Set. Calling <code>object.unset(\"foo\")</code>\nis a Parse.Op.Unset. These operations are stored in a Parse.Object and\nsent to the server as part of <code>object.save()</code> operations.\nInstances of Parse.Op should be immutable.\n\nYou should not create subclasses of Parse.Op or instantiate Parse.Op\ndirectly.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 3227
        },
        "Provides an interface to Parse's logging and analytics backend..A Set operation indicates that either the field was changed using\nParse.Object.set, or it is a mutable container that was detected as being\nchanged.": {
            "name": "Provides an interface to Parse's logging and analytics backend..A Set operation indicates that either the field was changed using\nParse.Object.set, or it is a mutable container that was detected as being\nchanged.",
            "shortname": "A Set operation indicates that either the field was changed using\nParse.Object.set, or it is a mutable container that was detected as being\nchanged.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 3289
        },
        "Provides an interface to Parse's logging and analytics backend..An Unset operation indicates that this field has been deleted from the\nobject.": {
            "name": "Provides an interface to Parse's logging and analytics backend..An Unset operation indicates that this field has been deleted from the\nobject.",
            "shortname": "An Unset operation indicates that this field has been deleted from the\nobject.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 3331
        },
        "Provides an interface to Parse's logging and analytics backend..An Increment is an atomic operation where the numeric value for the field\nwill be increased by a given amount.": {
            "name": "Provides an interface to Parse's logging and analytics backend..An Increment is an atomic operation where the numeric value for the field\nwill be increased by a given amount.",
            "shortname": "An Increment is an atomic operation where the numeric value for the field\nwill be increased by a given amount.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 3358
        },
        "Provides an interface to Parse's logging and analytics backend..Add is an atomic operation where the given objects will be appended to the\narray that is stored in this field.": {
            "name": "Provides an interface to Parse's logging and analytics backend..Add is an atomic operation where the given objects will be appended to the\narray that is stored in this field.",
            "shortname": "Add is an atomic operation where the given objects will be appended to the\narray that is stored in this field.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 3412
        },
        "Provides an interface to Parse's logging and analytics backend..AddUnique is an atomic operation where the given items will be appended to\nthe array that is stored in this field only if they were not already\npresent in the array.": {
            "name": "Provides an interface to Parse's logging and analytics backend..AddUnique is an atomic operation where the given items will be appended to\nthe array that is stored in this field only if they were not already\npresent in the array.",
            "shortname": "AddUnique is an atomic operation where the given items will be appended to\nthe array that is stored in this field only if they were not already\npresent in the array.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 3465
        },
        "Provides an interface to Parse's logging and analytics backend..Remove is an atomic operation where the given objects will be removed from\nthe array that is stored in this field.": {
            "name": "Provides an interface to Parse's logging and analytics backend..Remove is an atomic operation where the given objects will be removed from\nthe array that is stored in this field.",
            "shortname": "Remove is an atomic operation where the given objects will be removed from\nthe array that is stored in this field.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 3540
        },
        "Provides an interface to Parse's logging and analytics backend..A Relation operation indicates that the field is an instance of\nParse.Relation, and objects are being added to, or removed from, that\nrelation.": {
            "name": "Provides an interface to Parse's logging and analytics backend..A Relation operation indicates that the field is an instance of\nParse.Relation, and objects are being added to, or removed from, that\nrelation.",
            "shortname": "A Relation operation indicates that the field is an instance of\nParse.Relation, and objects are being added to, or removed from, that\nrelation.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 3602
        },
        "Provides an interface to Parse's logging and analytics backend..<p>\nA class that is used to access all of the children of a many-to-many\nrelationship.  Each instance of Parse.Relation is associated with a\nparticular parent object and key.\n</p>": {
            "name": "Provides an interface to Parse's logging and analytics backend..<p>\nA class that is used to access all of the children of a many-to-many\nrelationship.  Each instance of Parse.Relation is associated with a\nparticular parent object and key.\n</p>",
            "shortname": "<p>\nA class that is used to access all of the children of a many-to-many\nrelationship.  Each instance of Parse.Relation is associated with a\nparticular parent object and key.\n</p>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 3758,
            "description": "Creates a new Relation for the given parent object and key. This\nconstructor should rarely be used directly, but rather created by\nParse.Object.relation.",
            "params": [
                {
                    "name": "parent",
                    "description": "The parent of this relation.",
                    "type": "Parse.Object"
                },
                {
                    "name": "key",
                    "description": "The key for this relation on the parent.",
                    "type": "String"
                }
            ],
            "see": [
                "Parse.Object#relation"
            ]
        },
        "": {
            "file": "js\\parse-1.4.2.js",
            "line": 4539,
            "description": "A Parse.File is a local representation of a file that is saved to the Parse\ncloud.",
            "see": [
                "Parse.Promise.prototype.then"
            ],
            "params": [
                {
                    "name": "name",
                    "description": "The file's name. This will be prefixed by a unique\n    value once the file has finished saving. The file name must begin with\n    an alphanumeric character, and consist of alphanumeric characters,\n    periods, spaces, underscores, or dashes.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data for the file, as either:\n    1. an Array of byte value Numbers, or\n    2. an Object like { base64: \"...\" } with a base64-encoded String.\n    3. a File object selected with a file upload control. (3) only works\n       in Firefox 3.6+, Safari 6.0.2+, Chrome 7+, and IE 10+.\n       For example:<pre>\nvar fileUploadControl = $(\"#profilePhotoFileUpload\")[0];\nif (fileUploadControl.files.length > 0) {\n  var file = fileUploadControl.files[0];\n  var name = \"photo.jpg\";\n  var parseFile = new Parse.File(name, file);\n  parseFile.save().then(function() {\n    // The file has been saved to Parse.\n  }, function(error) {\n    // The file either could not be read, or could not be saved to Parse.\n  });\n}</pre>",
                    "type": "Array"
                },
                {
                    "name": "type",
                    "description": "Optional Content-Type header to use for the file. If\n    this is omitted, the content type will be inferred from the name's\n    extension.",
                    "type": "String"
                }
            ]
        },
        "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>": {
            "name": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "shortname": "<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 4665,
            "description": "Creates a new model with defined attributes. A client id (cid) is\nautomatically generated and assigned for you.\n\n<p>You won't normally call this method directly.  It is recommended that\nyou use a subclass of <code>Parse.Object</code> instead, created by calling\n<code>extend</code>.</p>\n\n<p>However, if you don't want to use a subclass, or aren't sure which\nsubclass is appropriate, you can use this form:<pre>\n    var object = new Parse.Object(\"ClassName\");\n</pre>\nThat is basically equivalent to:<pre>\n    var MyClass = Parse.Object.extend(\"ClassName\");\n    var object = new MyClass();\n</pre></p>",
            "params": [
                {
                    "name": "attributes",
                    "description": "The initial set of data to store in the object.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "A set of Backbone-like options for creating the\n    object.  The only option currently supported is \"collection\".",
                    "type": "Object"
                }
            ],
            "see": [
                "Parse.Object.extend"
            ]
        },
        "Provides an interface to Parse's logging and analytics backend..A Parse.Role is a local representation of a role persisted to the Parse\ncloud.": {
            "name": "Provides an interface to Parse's logging and analytics backend..A Parse.Role is a local representation of a role persisted to the Parse\ncloud.",
            "shortname": "A Parse.Role is a local representation of a role persisted to the Parse\ncloud.",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 6503,
            "description": "Represents a Role on the Parse server. Roles represent groupings of\nUsers for the purposes of granting permissions (e.g. specifying an ACL\nfor an Object). Roles are specified by their sets of child users and\nchild roles, all of which are granted any permissions that the parent\nrole has.\n\n<p>Roles must have a name (which cannot be changed after creation of the\nrole), and must specify an ACL.</p>"
        },
        "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>": {
            "name": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "shortname": "<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 6632,
            "description": "Creates a new instance with the given models and options.  Typically, you\nwill not call this method directly, but will instead make a subclass using\n<code>Parse.Collection.extend</code>.",
            "params": [
                {
                    "name": "models",
                    "description": "An array of instances of <code>Parse.Object</code>.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "An optional object with Backbone-style options.\nValid options are:<ul>\n  <li>model: The Parse.Object subclass that this collection contains.\n  <li>query: An instance of Parse.Query to use when fetching items.\n  <li>comparator: A string property name or function to sort by.\n</ul>",
                    "type": "Object"
                }
            ],
            "see": [
                "Parse.Collection.extend"
            ]
        },
        "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>": {
            "name": "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "shortname": "<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 7096,
            "description": "Creating a Parse.View creates its initial element outside of the DOM,\nif an existing element is not provided..."
        },
        "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>": {
            "name": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "shortname": "<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 7302
        },
        "Provides an interface to Parse's logging and analytics backend..<p>A Parse.Session object is a local representation of a revocable session.\nThis class is a subclass of a Parse.Object, and retains the same\nfunctionality of a Parse.Object.</p>": {
            "name": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.Session object is a local representation of a revocable session.\nThis class is a subclass of a Parse.Object, and retains the same\nfunctionality of a Parse.Object.</p>",
            "shortname": "<p>A Parse.Session object is a local representation of a revocable session.\nThis class is a subclass of a Parse.Object, and retains the same\nfunctionality of a Parse.Object.</p>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides an interface to Parse's logging and analytics backend.",
            "file": "js\\parse-1.4.2.js",
            "line": 8082
        },
        "Provides a set of utilities for using Parse with Facebook..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>": {
            "name": "Provides a set of utilities for using Parse with Facebook..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "shortname": "<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides a set of utilities for using Parse with Facebook.",
            "file": "js\\parse-1.4.2.js",
            "line": 8177,
            "description": "Creates a new parse Parse.Query for the given Parse.Object subclass.",
            "params": [
                {
                    "name": "objectClass",
                    "description": "-\n  An instance of a subclass of Parse.Object, or a Parse className string."
                }
            ]
        },
        "Provides a set of utilities for using Parse with Facebook..<p>A fork of Backbone.History, provided for your convenience.  If you \nuse this class, you must also include jQuery, or another library \nthat provides a jQuery-compatible $ function.  For more information,\nsee the <a href=\"http://documentcloud.github.com/backbone/#History\">\nBackbone documentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>": {
            "name": "Provides a set of utilities for using Parse with Facebook..<p>A fork of Backbone.History, provided for your convenience.  If you \nuse this class, you must also include jQuery, or another library \nthat provides a jQuery-compatible $ function.  For more information,\nsee the <a href=\"http://documentcloud.github.com/backbone/#History\">\nBackbone documentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "shortname": "<p>A fork of Backbone.History, provided for your convenience.  If you \nuse this class, you must also include jQuery, or another library \nthat provides a jQuery-compatible $ function.  For more information,\nsee the <a href=\"http://documentcloud.github.com/backbone/#History\">\nBackbone documentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Provides a set of utilities for using Parse with Facebook.",
            "file": "js\\parse-1.4.2.js",
            "line": 9265,
            "description": "History serves as a global router (per frame) to handle hashchange\nevents or pushState, match the appropriate route, and trigger\ncallbacks. You shouldn't ever have to create one of these yourself\n— you should use the reference to <code>Parse.history</code>\nthat will be created for you automatically if you make use of \nRouters with routes."
        },
        "Contains functions for calling and declaring\n<a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n<p><strong><em>\n  Some functions are only available from Cloud Code.\n</em></strong></p>.<p>A fork of Backbone.Router, provided for your convenience.\nFor more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>": {
            "name": "Contains functions for calling and declaring\n<a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n<p><strong><em>\n  Some functions are only available from Cloud Code.\n</em></strong></p>.<p>A fork of Backbone.Router, provided for your convenience.\nFor more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "shortname": "<p>A fork of Backbone.Router, provided for your convenience.\nFor more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Contains functions for calling and declaring\n<a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n<p><strong><em>\n  Some functions are only available from Cloud Code.\n</em></strong></p>",
            "file": "js\\parse-1.4.2.js",
            "line": 9527,
            "description": "Routers map faux-URLs to actions, and fire events when routes are\nmatched. Creating a new one sets its `routes` hash, if not set statically."
        },
        "Usuarios": {
            "name": "Usuarios",
            "shortname": "Usuarios",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "js\\services.js",
            "line": 3,
            "description": "Utilidad para crear y obtener usuarios."
        },
        "Chats": {
            "name": "Chats",
            "shortname": "Chats",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "js\\services.js",
            "line": 55,
            "description": "Utilidad para regresar todos, eliminiar, obtener y agregar un Chat (Producto)"
        }
    },
    "classitems": [
        {
            "file": "js\\controllers.js",
            "line": 12,
            "description": "Esto se realiza al entrar a la pagina mostrando cada chat que hay",
            "itemtype": "event",
            "name": "load",
            "class": "ChatsCtrl"
        },
        {
            "file": "js\\controllers.js",
            "line": 30,
            "description": "Llama al metodo para eliminar cuando se lanze el evento",
            "itemtype": "event",
            "name": "remove",
            "params": [
                {
                    "name": "chatid",
                    "description": "Id para identificar el chat a eliminar",
                    "type": "String"
                }
            ],
            "class": "ChatsCtrl"
        },
        {
            "file": "js\\controllers.js",
            "line": 49,
            "description": "Este evento muestra la informacion del chat",
            "itemtype": "event",
            "name": "load",
            "class": "ChatsDetailCtrl"
        },
        {
            "file": "js\\controllers.js",
            "line": 84,
            "description": "Este evento crea la variable para trabajar",
            "itemtype": "event",
            "name": "load",
            "class": "ChatsAddCtrl"
        },
        {
            "file": "js\\controllers.js",
            "line": 92,
            "description": "Este evento ocurre al momento de enviar la informacion\ny sirve para guardar la informacion.",
            "itemtype": "event",
            "name": "update",
            "class": "ChatsAddCtrl"
        },
        {
            "file": "js\\controllers.js",
            "line": 104,
            "description": "Este evento ocurre al momento de hacer click en el boton reset\ny sirve para borrar toda la informacion",
            "itemtype": "event",
            "name": "reset",
            "class": "ChatsAddCtrl"
        },
        {
            "file": "js\\controllers.js",
            "line": 124,
            "description": "Este evento obtiene la informacion minima para trabajar",
            "itemtype": "event",
            "name": "load",
            "class": "ChatsBuy"
        },
        {
            "file": "js\\controllers.js",
            "line": 178,
            "description": "Este evento se encarga de mostrar/ocultar el formulario desplegable",
            "itemtype": "event",
            "name": "toggle",
            "class": "ChatsBuy"
        },
        {
            "file": "js\\controllers.js",
            "line": 199,
            "description": "Sirve para mandar la informacion del formulario",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "compra",
                    "description": "\nContiene la informacion de los datos, ya sea la informacion de una tarjeta, si se va a usar una tarjeta guardada en stripe o si se actualizara la tarjeta de stripe del cliente.",
                    "type": "Object"
                }
            ],
            "class": "ChatsBuy"
        },
        {
            "file": "js\\controllers.js",
            "line": 208,
            "description": "Sirve para realizar la compra del articulo (teniendo la informacion de la tarjeta)",
            "params": [
                {
                    "name": "usuario\nContiene",
                    "description": "toda la informacion de la tarjeta en Stripe",
                    "type": "Object"
                }
            ],
            "class": "ChatsBuy"
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 1250,
            "description": "Contains all Parse API classes and functions.",
            "name": "Parse",
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Contains all Parse API classes and functions."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 1300,
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Contains all Parse API classes and functions."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 1343,
            "description": "Call this method first to set up your authentication tokens for Parse.\nYou can get your keys from the Data Browser on parse.com.",
            "params": [
                {
                    "name": "applicationId",
                    "description": "Your Parse Application ID.",
                    "type": "String"
                },
                {
                    "name": "javaScriptKey",
                    "description": "Your Parse JavaScript Key.",
                    "type": "String"
                },
                {
                    "name": "masterKey",
                    "description": "(optional) Your Parse Master Key. (Node.js only!)",
                    "type": "String"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Contains all Parse API classes and functions."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 1358,
            "description": "Call this method first to set up master authentication tokens for Parse.\nThis method is for Parse's own private use.",
            "params": [
                {
                    "name": "applicationId",
                    "description": "Your Parse Application ID.",
                    "type": "String"
                },
                {
                    "name": "javaScriptKey",
                    "description": "Your Parse JavaScript Key.",
                    "type": "String"
                },
                {
                    "name": "masterKey",
                    "description": "Your Parse Master Key.",
                    "type": "String"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Contains all Parse API classes and functions."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 1377,
            "description": "Switches the Parse SDK to using the Master key.  The Master key grants\npriveleged access to the data in Parse and can be used to bypass ACLs and\nother restrictions that are applied to the client SDKs.\n<p><strong><em>Available in Cloud Code and Node.js only.</em></strong>\n</p>",
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Contains all Parse API classes and functions."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 1389,
            "description": "Returns prefix for Storage keys used by this instance of Parse.",
            "params": [
                {
                    "name": "path",
                    "description": "The relative suffix to append to it.\n    null or undefined is treated as the empty string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The full key name.",
                "type": "String"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Contains all Parse API classes and functions."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 1411,
            "description": "Returns a Promise that is resolved with the unique string for this app on\nthis machine.\nGets reset when Storage is cleared.",
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Contains all Parse API classes and functions."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 1587,
            "description": "Options:\n  route: is classes, users, login, etc.\n  objectId: null if there is no associated objectId.\n  method: the http method for the REST API.\n  dataObject: the payload as an object, or null if there is none.\n  useMasterKey: overrides whether to use the master key if set.",
            "ignore": "",
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Contains all Parse API classes and functions."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 1718,
            "description": "Converts a value in a Parse Object into the appropriate representation.\nThis is the JS equivalent of Java's Parse.maybeReferenceAndEncode(Object)\nif seenObjects is falsey. Otherwise any Parse.Objects not in\nseenObjects will be fully embedded rather than encoded\nas a pointer.  This array will be used to prevent going into an infinite\nloop because we have circular references.  If seenObjects\nis set, then none of the Parse Objects that are serialized can be dirty.",
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Contains all Parse API classes and functions."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 1787,
            "description": "The inverse function of Parse._encode.\nTODO: make decode not mutate value.",
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Contains all Parse API classes and functions."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 1861,
            "description": "Does a deep traversal of every item in object, calling func on every one.",
            "params": [
                {
                    "name": "object",
                    "description": "The object or array to traverse deeply.",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "The function to call for every item. It will\n    be passed the item as an argument. If it returns a truthy value, that\n    value will replace the item in its parent container.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the result of calling func on the top-level object itself."
            },
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Contains all Parse API classes and functions."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 1906,
            "description": "This is like _.each, except:\n* it doesn't work for so-called array-like objects,\n* it does work for dictionaries with a \"length\" attribute.",
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Contains all Parse API classes and functions."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2065,
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2071,
            "description": "Tracks the occurrence of a custom event with additional dimensions.\nParse will store a data point at the time of invocation with the given\nevent name.\n\nDimensions will allow segmentation of the occurrences of this custom\nevent. Keys and values should be {@code String}s, and will throw\notherwise.\n\nTo track a user signup along with additional metadata, consider the\nfollowing:\n<pre>\nvar dimensions = {\n gender: 'm',\n source: 'web',\n dayType: 'weekend'\n};\nParse.Analytics.track('signup', dimensions);\n</pre>\n\nThere is a default limit of 8 dimensions per event tracked.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the custom event to report to Parse as\nhaving happened.",
                    "type": "String"
                },
                {
                    "name": "dimensions",
                    "description": "The dictionary of information by which to\nsegment this event.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved when the round-trip\nto the server completes.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2140,
            "description": "Retrieves the most recently-fetched configuration object, either from\nmemory or from local storage if necessary.",
            "return": {
                "description": "The most recently-fetched Parse.Config if it\n    exists, else an empty Parse.Config.",
                "type": "Parse.Config"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2168,
            "description": "Gets a new configuration object from the server.",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object.\nValid options are:<ul>\n  <li>success: Function to call when the get completes successfully.\n  <li>error: Function to call when the get fails.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved with a newly-created\n    configuration object when the get completes.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2203,
            "description": "Gets the HTML-escaped value of an attribute.",
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2222,
            "description": "Gets the value of an attribute.",
            "params": [
                {
                    "name": "attr",
                    "description": "The name of an attribute.",
                    "type": "String"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2267,
            "description": "Error code indicating some error other than those enumerated here.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2273,
            "description": "Error code indicating that something has gone wrong with the server.\nIf you get this error code, it is Parse's fault. Contact us at \nhttps://parse.com/help",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2281,
            "description": "Error code indicating the connection to the Parse servers failed.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2287,
            "description": "Error code indicating the specified object doesn't exist.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2293,
            "description": "Error code indicating you tried to query with a datatype that doesn't\nsupport it, like exact matching an array or object.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2300,
            "description": "Error code indicating a missing or invalid classname. Classnames are\ncase-sensitive. They must start with a letter, and a-zA-Z0-9_ are the\nonly valid characters.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2308,
            "description": "Error code indicating an unspecified object id.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2314,
            "description": "Error code indicating an invalid key name. Keys are case-sensitive. They\nmust start with a letter, and a-zA-Z0-9_ are the only valid characters.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2321,
            "description": "Error code indicating a malformed pointer. You should not see this unless\nyou have been mucking about changing internal Parse code.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2328,
            "description": "Error code indicating that badly formed JSON was received upstream. This\neither indicates you have done something unusual with modifying how\nthings encode to JSON, or the network is failing badly.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2336,
            "description": "Error code indicating that the feature you tried to access is only\navailable internally for testing purposes.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2343,
            "description": "You must call Parse.initialize before using the Parse library.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2349,
            "description": "Error code indicating that a field was set to an inconsistent type.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2355,
            "description": "Error code indicating an invalid channel name. A channel name is either\nan empty string (the broadcast channel) or contains only a-zA-Z0-9_\ncharacters and starts with a letter.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2363,
            "description": "Error code indicating that push is misconfigured.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2369,
            "description": "Error code indicating that the object is too large.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2375,
            "description": "Error code indicating that the operation isn't allowed for clients.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2381,
            "description": "Error code indicating the result was not found in the cache.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2387,
            "description": "Error code indicating that an invalid key was used in a nested\nJSONObject.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2394,
            "description": "Error code indicating that an invalid filename was used for ParseFile.\nA valid file name contains only a-zA-Z0-9_. characters and is between 1\nand 128 characters.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2402,
            "description": "Error code indicating an invalid ACL was provided.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2408,
            "description": "Error code indicating that the request timed out on the server. Typically\nthis indicates that the request is too expensive to run.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2415,
            "description": "Error code indicating that the email address was invalid.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2421,
            "description": "Error code indicating a missing content type.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2427,
            "description": "Error code indicating a missing content length.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2433,
            "description": "Error code indicating an invalid content length.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2439,
            "description": "Error code indicating a file that was too large.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2445,
            "description": "Error code indicating an error saving a file.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2451,
            "description": "Error code indicating that a unique field was given a value that is\nalready taken.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2458,
            "description": "Error code indicating that a role's name is invalid.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2464,
            "description": "Error code indicating that an application quota was exceeded.  Upgrade to\nresolve.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2471,
            "description": "Error code indicating that a Cloud Code script failed.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2477,
            "description": "Error code indicating that a Cloud Code validation failed.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2483,
            "description": "Error code indicating that invalid image data was provided.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2489,
            "description": "Error code indicating an unsaved file.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2495,
            "description": "Error code indicating an invalid push time.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2500,
            "description": "Error code indicating an error deleting a file.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2506,
            "description": "Error code indicating that the application has exceeded its request\nlimit.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2513,
            "description": "Error code indicating an invalid event name.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2518,
            "description": "Error code indicating that the username is missing or empty.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2524,
            "description": "Error code indicating that the password is missing or empty.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2530,
            "description": "Error code indicating that the username has already been taken.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2536,
            "description": "Error code indicating that the email has already been taken.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2542,
            "description": "Error code indicating that the email is missing, but must be specified.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2548,
            "description": "Error code indicating that a user with the specified email was not found.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2554,
            "description": "Error code indicating that a user object without a valid session could\nnot be altered.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2561,
            "description": "Error code indicating that a user can only be created through signup.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2567,
            "description": "Error code indicating that an an account being linked is already linked\nto another user.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2574,
            "description": "Error code indicating that the current session token is invalid.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2580,
            "description": "Error code indicating that a user cannot be linked to an account because\nthat account's id could not be found.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2587,
            "description": "Error code indicating that a user with a linked (e.g. Facebook) account\nhas an invalid session.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2594,
            "description": "Error code indicating that a service being linked (e.g. Facebook or\nTwitter) is unsupported.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2601,
            "description": "Error code indicating that there were multiple errors. Aggregate errors\nhave an \"errors\" property, which is an array of error objects with more\ndetail about each error that occurred.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2609,
            "description": "Error code indicating the client was unable to read an input file.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2615,
            "description": "Error code indicating a real error code is unavailable because\nwe had to use an XDomainRequest object to allow CORS requests in\nInternet Explorer, which strips the body from HTTP responses that have\na non-2XX status code.",
            "constant": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2657,
            "description": "Bind one or more space separated events, `events`, to a `callback`\nfunction. Passing `\"all\"` will bind the callback to all events fired.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Events is a fork of Backbone's Events module, provided for your\nconvenience.</p>\n\n<p>A module that can be mixed in to any object in order to provide\nit with custom events. You may bind callback functions to an event\nwith `on`, or remove these functions with `off`.\nTriggering an event fires all callbacks in the order that `on` was\ncalled.\n\n<pre>\n    var object = {};\n    _.extend(object, Parse.Events);\n    object.on('expand', function(){ alert('expanded'); });\n    object.trigger('expand');</pre></p>\n\n<p>For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Events\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2687,
            "description": "Remove one or many callbacks. If `context` is null, removes all callbacks\nwith that function. If `callback` is null, removes all callbacks for the\nevent. If `events` is null, removes all bound callbacks for all events.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Events is a fork of Backbone's Events module, provided for your\nconvenience.</p>\n\n<p>A module that can be mixed in to any object in order to provide\nit with custom events. You may bind callback functions to an event\nwith `on`, or remove these functions with `off`.\nTriggering an event fires all callbacks in the order that `on` was\ncalled.\n\n<pre>\n    var object = {};\n    _.extend(object, Parse.Events);\n    object.on('expand', function(){ alert('expanded'); });\n    object.trigger('expand');</pre></p>\n\n<p>For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Events\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2732,
            "description": "Trigger one or many events, firing all bound callbacks. Callbacks are\npassed the same arguments as `trigger` is, apart from the event name\n(unless you're listening on `\"all\"`, which will cause your callback to\nreceive the true name of the event as the first argument).",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Events is a fork of Backbone's Events module, provided for your\nconvenience.</p>\n\n<p>A module that can be mixed in to any object in order to provide\nit with custom events. You may bind callback functions to an event\nwith `on`, or remove these functions with `off`.\nTriggering an event fires all callbacks in the order that `on` was\ncalled.\n\n<pre>\n    var object = {};\n    _.extend(object, Parse.Events);\n    object.on('expand', function(){ alert('expanded'); });\n    object.trigger('expand');</pre></p>\n\n<p>For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Events\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2773,
            "itemtype": "method",
            "name": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Events is a fork of Backbone's Events module, provided for your\nconvenience.</p>\n\n<p>A module that can be mixed in to any object in order to provide\nit with custom events. You may bind callback functions to an event\nwith `on`, or remove these functions with `off`.\nTriggering an event fires all callbacks in the order that `on` was\ncalled.\n\n<pre>\n    var object = {};\n    _.extend(object, Parse.Events);\n    object.on('expand', function(){ alert('expanded'); });\n    object.trigger('expand');</pre></p>\n\n<p>For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Events\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2778,
            "itemtype": "method",
            "name": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Events is a fork of Backbone's Events module, provided for your\nconvenience.</p>\n\n<p>A module that can be mixed in to any object in order to provide\nit with custom events. You may bind callback functions to an event\nwith `on`, or remove these functions with `off`.\nTriggering an event fires all callbacks in the order that `on` was\ncalled.\n\n<pre>\n    var object = {};\n    _.extend(object, Parse.Events);\n    object.on('expand', function(){ alert('expanded'); });\n    object.trigger('expand');</pre></p>\n\n<p>For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Events\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2857,
            "lends": "Parse.GeoPoint.prototype",
            "itemtype": "property",
            "name": "{float} longitude East-west portion of the coordinate, in range\n  [-180, 180].  Throws if set out of range in a modern browser.",
            "type": "Float",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Represents a latitude / longitude point that may be associated\nwith a key in a ParseObject or used as a reference point for geo queries.\nThis allows proximity-based queries on the key.</p>\n\n<p>Only one key in a class may contain a GeoPoint.</p>\n\n<p>Example:<pre>\n  var point = new Parse.GeoPoint(30.0, -20.0);\n  var object = new Parse.Object(\"PlaceObject\");\n  object.set(\"location\", point);\n  object.save();</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2865,
            "description": "Throws an exception if the given lat-long is out of bounds.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Represents a latitude / longitude point that may be associated\nwith a key in a ParseObject or used as a reference point for geo queries.\nThis allows proximity-based queries on the key.</p>\n\n<p>Only one key in a class may contain a GeoPoint.</p>\n\n<p>Example:<pre>\n  var point = new Parse.GeoPoint(30.0, -20.0);\n  var object = new Parse.Object(\"PlaceObject\");\n  object.set(\"location\", point);\n  object.save();</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2883,
            "description": "Creates a GeoPoint with the user's current location, if available.\nCalls options.success with a new GeoPoint instance or calls options.error.",
            "params": [
                {
                    "name": "options",
                    "description": "An object with success and error callbacks.",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Represents a latitude / longitude point that may be associated\nwith a key in a ParseObject or used as a reference point for geo queries.\nThis allows proximity-based queries on the key.</p>\n\n<p>Only one key in a class may contain a GeoPoint.</p>\n\n<p>Example:<pre>\n  var point = new Parse.GeoPoint(30.0, -20.0);\n  var object = new Parse.Object(\"PlaceObject\");\n  object.set(\"location\", point);\n  object.save();</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2904,
            "description": "Returns a JSON representation of the GeoPoint, suitable for Parse.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Represents a latitude / longitude point that may be associated\nwith a key in a ParseObject or used as a reference point for geo queries.\nThis allows proximity-based queries on the key.</p>\n\n<p>Only one key in a class may contain a GeoPoint.</p>\n\n<p>Example:<pre>\n  var point = new Parse.GeoPoint(30.0, -20.0);\n  var object = new Parse.Object(\"PlaceObject\");\n  object.set(\"location\", point);\n  object.save();</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2917,
            "description": "Returns the distance from this GeoPoint to another in radians.",
            "params": [
                {
                    "name": "point",
                    "description": "the other Parse.GeoPoint.",
                    "type": "Parse.GeoPoint"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Represents a latitude / longitude point that may be associated\nwith a key in a ParseObject or used as a reference point for geo queries.\nThis allows proximity-based queries on the key.</p>\n\n<p>Only one key in a class may contain a GeoPoint.</p>\n\n<p>Example:<pre>\n  var point = new Parse.GeoPoint(30.0, -20.0);\n  var object = new Parse.Object(\"PlaceObject\");\n  object.set(\"location\", point);\n  object.save();</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2940,
            "description": "Returns the distance from this GeoPoint to another in kilometers.",
            "params": [
                {
                    "name": "point",
                    "description": "the other Parse.GeoPoint.",
                    "type": "Parse.GeoPoint"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Represents a latitude / longitude point that may be associated\nwith a key in a ParseObject or used as a reference point for geo queries.\nThis allows proximity-based queries on the key.</p>\n\n<p>Only one key in a class may contain a GeoPoint.</p>\n\n<p>Example:<pre>\n  var point = new Parse.GeoPoint(30.0, -20.0);\n  var object = new Parse.Object(\"PlaceObject\");\n  object.set(\"location\", point);\n  object.save();</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 2949,
            "description": "Returns the distance from this GeoPoint to another in miles.",
            "params": [
                {
                    "name": "point",
                    "description": "the other Parse.GeoPoint.",
                    "type": "Parse.GeoPoint"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Represents a latitude / longitude point that may be associated\nwith a key in a ParseObject or used as a reference point for geo queries.\nThis allows proximity-based queries on the key.</p>\n\n<p>Only one key in a class may contain a GeoPoint.</p>\n\n<p>Example:<pre>\n  var point = new Parse.GeoPoint(30.0, -20.0);\n  var object = new Parse.Object(\"PlaceObject\");\n  object.set(\"location\", point);\n  object.save();</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3012,
            "description": "Returns a JSON-encoded version of the ACL.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3066,
            "description": "Set whether the given user is allowed to read this object.",
            "params": [
                {
                    "name": "userId",
                    "description": "An instance of Parse.User or its objectId."
                },
                {
                    "name": "allowed",
                    "description": "Whether that user should have read access.",
                    "type": "Boolean"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3075,
            "description": "Get whether the given user id is *explicitly* allowed to read this object.\nEven if this returns false, the user may still be able to access it if\ngetPublicReadAccess returns true or a role that the user belongs to has\nwrite access.",
            "params": [
                {
                    "name": "userId",
                    "description": "An instance of Parse.User or its objectId, or a Parse.Role."
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3087,
            "description": "Set whether the given user id is allowed to write this object.",
            "params": [
                {
                    "name": "userId",
                    "description": "An instance of Parse.User or its objectId, or a Parse.Role.."
                },
                {
                    "name": "allowed",
                    "description": "Whether that user should have write access.",
                    "type": "Boolean"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3096,
            "description": "Get whether the given user id is *explicitly* allowed to write this object.\nEven if this returns false, the user may still be able to write it if\ngetPublicWriteAccess returns true or a role that the user belongs to has\nwrite access.",
            "params": [
                {
                    "name": "userId",
                    "description": "An instance of Parse.User or its objectId, or a Parse.Role."
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3108,
            "description": "Set whether the public is allowed to read this object.",
            "params": [
                {
                    "name": "allowed",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3116,
            "description": "Get whether the public is allowed to read this object.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3124,
            "description": "Set whether the public is allowed to write this object.",
            "params": [
                {
                    "name": "allowed",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3132,
            "description": "Get whether the public is allowed to write this object.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3140,
            "description": "Get whether users belonging to the given role are allowed\nto read this object. Even if this returns false, the role may\nstill be able to write it if a parent role has read access.",
            "params": [
                {
                    "name": "role",
                    "description": "The name of the role, or a Parse.Role object."
                }
            ],
            "return": {
                "description": "true if the role has read access. false otherwise.",
                "type": "Boolean"
            },
            "throws": {
                "description": "If role is neither a Parse.Role nor a String.",
                "type": "String"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3160,
            "description": "Get whether users belonging to the given role are allowed\nto write this object. Even if this returns false, the role may\nstill be able to write it if a parent role has write access.",
            "params": [
                {
                    "name": "role",
                    "description": "The name of the role, or a Parse.Role object."
                }
            ],
            "return": {
                "description": "true if the role has write access. false otherwise.",
                "type": "Boolean"
            },
            "throws": {
                "description": "If role is neither a Parse.Role nor a String.",
                "type": "String"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3180,
            "description": "Set whether users belonging to the given role are allowed\nto read this object.",
            "params": [
                {
                    "name": "role",
                    "description": "The name of the role, or a Parse.Role object."
                },
                {
                    "name": "allowed",
                    "description": "Whether the given role can read this object.",
                    "type": "Boolean"
                }
            ],
            "throws": {
                "description": "If role is neither a Parse.Role nor a String.",
                "type": "String"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3200,
            "description": "Set whether users belonging to the given role are allowed\nto write this object.",
            "params": [
                {
                    "name": "role",
                    "description": "The name of the role, or a Parse.Role object."
                },
                {
                    "name": "allowed",
                    "description": "Whether the given role can write this object.",
                    "type": "Boolean"
                }
            ],
            "throws": {
                "description": "If role is neither a Parse.Role nor a String.",
                "type": "String"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3248,
            "description": "To create a new Op, call Parse.Op._extend();",
            "class": "Provides an interface to Parse's logging and analytics backend..A Parse.Op is an atomic operation that can be applied to a field in a\nParse.Object. For example, calling <code>object.set(\"foo\", \"bar\")</code>\nis an example of a Parse.Op.Set. Calling <code>object.unset(\"foo\")</code>\nis a Parse.Op.Unset. These operations are stored in a Parse.Object and\nsent to the server as part of <code>object.save()</code> operations.\nInstances of Parse.Op should be immutable.\n\nYou should not create subclasses of Parse.Op or instantiate Parse.Op\ndirectly.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3256,
            "description": "Registers a function to convert a json object with an __op field into an\ninstance of a subclass of Parse.Op.",
            "class": "Provides an interface to Parse's logging and analytics backend..A Parse.Op is an atomic operation that can be applied to a field in a\nParse.Object. For example, calling <code>object.set(\"foo\", \"bar\")</code>\nis an example of a Parse.Op.Set. Calling <code>object.unset(\"foo\")</code>\nis a Parse.Op.Unset. These operations are stored in a Parse.Object and\nsent to the server as part of <code>object.save()</code> operations.\nInstances of Parse.Op should be immutable.\n\nYou should not create subclasses of Parse.Op or instantiate Parse.Op\ndirectly.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3264,
            "description": "Converts a json object into an instance of a subclass of Parse.Op.",
            "class": "Provides an interface to Parse's logging and analytics backend..A Parse.Op is an atomic operation that can be applied to a field in a\nParse.Object. For example, calling <code>object.set(\"foo\", \"bar\")</code>\nis an example of a Parse.Op.Set. Calling <code>object.unset(\"foo\")</code>\nis a Parse.Op.Unset. These operations are stored in a Parse.Object and\nsent to the server as part of <code>object.save()</code> operations.\nInstances of Parse.Op should be immutable.\n\nYou should not create subclasses of Parse.Op or instantiate Parse.Op\ndirectly.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3300,
            "description": "Returns the new value of this field after the set.",
            "class": "Provides an interface to Parse's logging and analytics backend..A Set operation indicates that either the field was changed using\nParse.Object.set, or it is a mutable container that was detected as being\nchanged.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3307,
            "description": "Returns a JSON version of the operation suitable for sending to Parse.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..A Set operation indicates that either the field was changed using\nParse.Object.set, or it is a mutable container that was detected as being\nchanged.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3324,
            "description": "A sentinel value that is returned by Parse.Op.Unset._estimate to\nindicate the field should be deleted. Basically, if you find _UNSET as a\nvalue in your object, you should remove that key.",
            "class": "Provides an interface to Parse's logging and analytics backend..A Set operation indicates that either the field was changed using\nParse.Object.set, or it is a mutable container that was detected as being\nchanged.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3337,
            "description": "Returns a JSON version of the operation suitable for sending to Parse.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..An Unset operation indicates that this field has been deleted from the\nobject.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3364,
            "description": "_initialize: function(amount) {\n      this._amount = amount;\n    },\n/**\n     * Returns the amount to increment by.\n     * @return {Number} the amount to increment by.",
            "class": "Provides an interface to Parse's logging and analytics backend..An Increment is an atomic operation where the numeric value for the field\nwill be increased by a given amount.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3378,
            "description": "Returns a JSON version of the operation suitable for sending to Parse.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..An Increment is an atomic operation where the numeric value for the field\nwill be increased by a given amount.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3422,
            "description": "Returns the objects to be added to the array.",
            "return": {
                "description": "The objects to be added to the array.",
                "type": "Array"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..Add is an atomic operation where the given objects will be appended to the\narray that is stored in this field.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3430,
            "description": "Returns a JSON version of the operation suitable for sending to Parse.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..Add is an atomic operation where the given objects will be appended to the\narray that is stored in this field.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3472,
            "description": "_initialize: function(objects) {\n      this._objects = _.uniq(objects);\n    },\n/**\n     * Returns the objects to be added to the array.\n     * @return {Array} The objects to be added to the array.",
            "class": "Provides an interface to Parse's logging and analytics backend..AddUnique is an atomic operation where the given items will be appended to\nthe array that is stored in this field only if they were not already\npresent in the array.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3486,
            "description": "Returns a JSON version of the operation suitable for sending to Parse.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..AddUnique is an atomic operation where the given items will be appended to\nthe array that is stored in this field only if they were not already\npresent in the array.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3550,
            "description": "Returns the objects to be removed from the array.",
            "return": {
                "description": "The objects to be removed from the array.",
                "type": "Array"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..Remove is an atomic operation where the given objects will be removed from\nthe array that is stored in this field.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3558,
            "description": "Returns a JSON version of the operation suitable for sending to Parse.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..Remove is an atomic operation where the given objects will be removed from\nthe array that is stored in this field.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3609,
            "description": "_initialize: function(adds, removes) {\n      this._targetClassName = null;\n  var self = this;\n  var pointerToId = function(object) {\n        if (object instanceof Parse.Object) {\n          if (!object.id) {\n            throw \"You can't add an unsaved Parse.Object to a relation.\";\n          }\n          if (!self._targetClassName) {\n            self._targetClassName = object.className;\n          }\n          if (self._targetClassName !== object.className) {\n            throw \"Tried to create a Parse.Relation with 2 different types: \" +\n                  self._targetClassName + \" and \" + object.className + \".\";\n          }\n          return object.id;\n        }\n        return object;\n      };\n  this.relationsToAdd = _.uniq(_.map(adds, pointerToId));\n      this.relationsToRemove = _.uniq(_.map(removes, pointerToId));\n    },\n/**\n     * Returns an array of unfetched Parse.Object that are being added to the\n     * relation.\n     * @return {Array}",
            "class": "Provides an interface to Parse's logging and analytics backend..A Relation operation indicates that the field is an instance of\nParse.Relation, and objects are being added to, or removed from, that\nrelation.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3651,
            "description": "Returns an array of unfetched Parse.Object that are being removed from\nthe relation.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..A Relation operation indicates that the field is an instance of\nParse.Relation, and objects are being added to, or removed from, that\nrelation.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3665,
            "description": "Returns a JSON version of the operation suitable for sending to Parse.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..A Relation operation indicates that the field is an instance of\nParse.Relation, and objects are being added to, or removed from, that\nrelation.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3780,
            "description": "Makes sure that this relation has the right parent and key.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>\nA class that is used to access all of the children of a many-to-many\nrelationship.  Each instance of Parse.Relation is associated with a\nparticular parent object and key.\n</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3794,
            "description": "Adds a Parse.Object or an array of Parse.Objects to the relation.",
            "params": [
                {
                    "name": "objects",
                    "description": "The item or items to add."
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>\nA class that is used to access all of the children of a many-to-many\nrelationship.  Each instance of Parse.Relation is associated with a\nparticular parent object and key.\n</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3808,
            "description": "Removes a Parse.Object or an array of Parse.Objects from this relation.",
            "params": [
                {
                    "name": "objects",
                    "description": "The item or items to remove."
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>\nA class that is used to access all of the children of a many-to-many\nrelationship.  Each instance of Parse.Relation is associated with a\nparticular parent object and key.\n</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3822,
            "description": "Returns a JSON version of the object suitable for saving to disk.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>\nA class that is used to access all of the children of a many-to-many\nrelationship.  Each instance of Parse.Relation is associated with a\nparticular parent object and key.\n</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3830,
            "description": "Returns a Parse.Query that is limited to objects in this\nrelation.",
            "return": {
                "description": "",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>\nA class that is used to access all of the children of a many-to-many\nrelationship.  Each instance of Parse.Relation is associated with a\nparticular parent object and key.\n</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3887,
            "description": "Returns true iff the given object fulfils the Promise interface.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3895,
            "description": "Returns a new promise that is resolved with a given value.",
            "return": {
                "description": "the new promise.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3905,
            "description": "Returns a new promise that is rejected with a given error.",
            "return": {
                "description": "the new promise.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3915,
            "description": "Returns a new promise that is fulfilled when all of the input promises\nare resolved. If any promise in the list fails, then the returned promise\nwill fail with the last error. If they all succeed, then the returned\npromise will succeed, with the results being the results of all the input\npromises. For example: <pre>\n  var p1 = Parse.Promise.as(1);\n  var p2 = Parse.Promise.as(2);\n  var p3 = Parse.Promise.as(3);\n\n  Parse.Promise.when(p1, p2, p3).then(function(r1, r2, r3) {\n    console.log(r1);  // prints 1\n    console.log(r2);  // prints 2\n    console.log(r3);  // prints 3\n  });</pre>\n\nThe input promises can also be specified as an array: <pre>\n  var promises = [p1, p2, p3];\n  Parse.Promise.when(promises).then(function(r1, r2, r3) {\n    console.log(r1);  // prints 1\n    console.log(r2);  // prints 2\n    console.log(r3);  // prints 3\n  });\n</pre>",
            "params": [
                {
                    "name": "promises",
                    "description": "a list of promises to wait for.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the new promise.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 3994,
            "description": "Runs the given asyncFunction repeatedly, as long as the predicate\nfunction returns a truthy value. Stops repeating if asyncFunction returns\na rejected promise.",
            "params": [
                {
                    "name": "predicate",
                    "description": "should return false when ready to stop.",
                    "type": "Function"
                },
                {
                    "name": "asyncFunction",
                    "description": "should return a Promise.",
                    "type": "Function"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4013,
            "description": "Marks this promise as fulfilled, firing any callbacks waiting on it.",
            "params": [
                {
                    "name": "result",
                    "description": "the result to pass to the callbacks.",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4032,
            "description": "Marks this promise as fulfilled, firing any callbacks waiting on it.",
            "params": [
                {
                    "name": "error",
                    "description": "the error to pass to the callbacks.",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4050,
            "description": "Adds callbacks to be called when this promise is fulfilled. Returns a new\nPromise that will be fulfilled when the callback is complete. It allows\nchaining. If the callback itself returns a Promise, then the one returned\nby \"then\" will not be fulfilled until that one returned by the callback\nis fulfilled.",
            "params": [
                {
                    "name": "resolvedCallback",
                    "description": "Function that is called when this\nPromise is resolved. Once the callback is complete, then the Promise\nreturned by \"then\" will also be fulfilled.",
                    "type": "Function"
                },
                {
                    "name": "rejectedCallback",
                    "description": "Function that is called when this\nPromise is rejected with an error. Once the callback is complete, then\nthe promise returned by \"then\" with be resolved successfully. If\nrejectedCallback is null, or it returns a rejected Promise, then the\nPromise returned by \"then\" will be rejected with that error.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A new Promise that will be fulfilled after this\nPromise is fulfilled and either callback has completed. If the callback\nreturned a Promise, then this Promise will not be fulfilled until that\none is.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4158,
            "description": "Add handlers to be called when the promise \nis either resolved or rejected",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4166,
            "description": "Add handlers to be called when the Promise object is resolved",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4173,
            "description": "Add handlers to be called when the Promise object is rejected",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4180,
            "description": "Run the given callbacks after this promise is fulfilled.",
            "params": [
                {
                    "name": "optionsOrCallback",
                    "description": "A Backbone-style options callback, or a\ncallback function. If this is an options object and contains a \"model\"\nattributes, that will be passed to error callbacks as the first argument."
                },
                {
                    "name": "model",
                    "description": "If truthy, this will be passed as the first result of\nerror callbacks. This is for Backbone-compatability."
                }
            ],
            "return": {
                "description": "A promise that will be resolved after the\ncallbacks are run, with the same result as this.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4232,
            "description": "Adds a callback function that should be called regardless of whether\nthis promise failed or succeeded. The callback will be given either the\narray of results for its first argument, or the error as its second,\ndepending on whether this Promise was rejected or resolved. Returns a\nnew Promise, like \"then\" would.",
            "params": [
                {
                    "name": "continuation",
                    "description": "the callback.",
                    "type": "Function"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4499,
            "description": "Reads a File using a FileReader.",
            "params": [
                {
                    "name": "file",
                    "description": "the File to read.",
                    "type": "File"
                },
                {
                    "name": "type",
                    "description": "(optional) the mimetype to override with.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A Promise that will be fulfilled with a\n    base64-encoded string of the data and its mime type.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4604,
            "description": "Gets the name of the file. Before save is called, this is the filename\ngiven by the user. After save is called, that name gets prefixed with a\nunique identifier.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4613,
            "description": "Gets the url of the file. It is only available after you save the file or\nafter you get the file from a Parse.Object.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4622,
            "description": "Saves the file to the Parse cloud.",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise that is resolved when the save finishes.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4731,
            "description": "The ID of this object, unique within its class.",
            "name": "id",
            "type": "String",
            "field": "",
            "memberof": "Parse.Object.prototype",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4739,
            "description": "The first time this object was saved on the server.",
            "name": "createdAt",
            "type": "Date",
            "field": "",
            "memberof": "Parse.Object.prototype",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4747,
            "description": "The last time this object was updated on the server.",
            "name": "updatedAt",
            "type": "Date",
            "field": "",
            "memberof": "Parse.Object.prototype",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4755,
            "description": "Saves the given list of Parse.Object.\nIf any error is encountered, stops and calls the error handler.\n\n<pre>\n  Parse.Object.saveAll([object1, object2, ...], {\n    success: function(list) {\n      // All the objects were saved.\n    },\n    error: function(error) {\n      // An error occurred while saving one of the objects.\n    },\n  });\n</pre>",
            "params": [
                {
                    "name": "list",
                    "description": "A list of <code>Parse.Object</code>.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.\nValid options are:<ul>\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n</ul>",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4784,
            "description": "Destroy the given list of models on the server if it was already persisted.\nOptimistically removes each model from its collection, if it has one.\nIf `wait: true` is passed, waits for the server to respond before removal.\n\n<p>Unlike saveAll, if an error occurs while deleting an individual model,\nthis method will continue trying to delete the rest of the models if\npossible, except in the case of a fatal error like a connection error.\n\n<p>In particular, the Parse.Error object returned in the case of error may\nbe one of two types:\n\n<ul>\n  <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\n      array of other Parse.Error objects. Each error object in this array\n      has an \"object\" property that references the object that could not be\n      deleted (for instance, because that object could not be found).</li>\n  <li>A non-aggregate Parse.Error. This indicates a serious error that\n      caused the delete operation to be aborted partway through (for\n      instance, a connection failure in the middle of the delete).</li>\n</ul>\n\n<pre>\n  Parse.Object.destroyAll([object1, object2, ...], {\n    success: function() {\n      // All the objects were deleted.\n    },\n    error: function(error) {\n      // An error occurred while deleting one or more of the objects.\n      // If this is an aggregate error, then we can inspect each error\n      // object individually to determine the reason why a particular\n      // object was not deleted.\n      if (error.code == Parse.Error.AGGREGATE_ERROR) {\n        for (var i = 0; i < error.errors.length; i++) {\n          console.log(\"Couldn't delete \" + error.errors[i].object.id +\n            \"due to \" + error.errors[i].message);\n        }\n      } else {\n        console.log(\"Delete aborted because of \" + error.message);\n      }\n    },\n  });\n</pre>",
            "params": [
                {
                    "name": "list",
                    "description": "A list of <code>Parse.Object</code>.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.\nValid options are:<ul>\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled when the destroyAll\n    completes.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4915,
            "description": "Fetches the given list of Parse.Object.\nIf any error is encountered, stops and calls the error handler.\n\n<pre>\n  Parse.Object.fetchAll([object1, object2, ...], {\n    success: function(list) {\n      // All the objects were fetched.\n    },\n    error: function(error) {\n      // An error occurred while fetching one of the objects.\n    },\n  });\n</pre>",
            "params": [
                {
                    "name": "list",
                    "description": "A list of <code>Parse.Object</code>.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.\nValid options are:<ul>\n  <li>success: A Backbone-style success callback.\n  <li>error: An Backbone-style error callback.\n</ul>",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4944,
            "description": "Fetches the given list of Parse.Object if needed.\nIf any error is encountered, stops and calls the error handler.\n\n<pre>\n  Parse.Object.fetchAllIfNeeded([object1, ...], {\n    success: function(list) {\n      // Objects were fetched and updated.\n    },\n    error: function(error) {\n      // An error occurred while fetching one of the objects.\n    },\n  });\n</pre>",
            "params": [
                {
                    "name": "list",
                    "description": "A list of <code>Parse.Object</code>.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.\nValid options are:<ul>\n  <li>success: A Backbone-style success callback.\n  <li>error: An Backbone-style error callback.\n</ul>",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4975,
            "description": "_existed: false,\n\n/**\n * Initialize is an empty function by default. Override it with your own\n * initialization logic.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 4984,
            "description": "Returns a JSON version of the object suitable for saving to Parse.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5027,
            "description": "Updates _hashedJSON to reflect the current state of this object.\nAdds any changed hash values to the set of pending changes.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5059,
            "description": "Returns true if this object has been modified since its last\nsave/refresh.  If an attribute is specified, it returns true only if that\nparticular attribute has been modified since the last save/refresh.",
            "params": [
                {
                    "name": "attr",
                    "description": "An attribute name (optional).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5083,
            "description": "Returns an array of keys that have been modified since last save/refresh",
            "return": {
                "description": "",
                "type": "Array of string"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5091,
            "description": "Gets a Pointer referencing this Object.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5103,
            "description": "Gets the value of an attribute.",
            "params": [
                {
                    "name": "attr",
                    "description": "The string name of an attribute.",
                    "type": "String"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5111,
            "description": "Gets a relation on the given class for the attribute.",
            "params": [
                {
                    "name": "String",
                    "description": "attr The attribute to get the relation for."
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5128,
            "description": "Gets the HTML-escaped value of an attribute.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5147,
            "description": "Returns <code>true</code> if the attribute contains a value that is not\nnull or undefined.",
            "params": [
                {
                    "name": "attr",
                    "description": "The string name of the attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5157,
            "description": "Pulls \"special\" fields like objectId, createdAt, etc. out of attrs\nand puts them on \"this\" directly.  Removes them from attrs.",
            "params": [
                {
                    "name": "attrs",
                    "description": "- A dictionary with the data for this Parse.Object."
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5181,
            "description": "Copies the given serverData to \"this\", refreshes attributes, and\nclears pending changes;",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5205,
            "description": "Merges another object's attributes into this object.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5223,
            "description": "Returns the json to be sent to the server.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5230,
            "description": "Called when a save fails because of an error. Any changes that were part\nof the save need to be merged with changes made after the save. This\nmight throw an exception is you do conflicting operations. For example,\nif you do:\n  object.set(\"foo\", \"bar\");\n  object.set(\"invalid field name\", \"baz\");\n  object.save();\n  object.increment(\"foo\");\nthen this will throw when the save fails and the client tries to merge\n\"bar\" with the +1.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5259,
            "description": "Called when a save completes successfully. This merges the changes that\nwere saved into the known server data, and overrides it with any data\nsent directly from the server.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5299,
            "description": "Called when a fetch or login is complete to set the known server data to\nthe given object.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5314,
            "description": "Applies the set of Parse.Op in opSet to the object target.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5327,
            "description": "Replaces the cached value for key with the current value.\nReturns true if the new value is different than the old value.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5347,
            "description": "Populates attributes[key] by starting with the last known data from the\nserver, and applying all of the local changes that have been made to that\nkey since then.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5371,
            "description": "Populates attributes by starting with the last known data from the\nserver, and applying all of the local changes that have been made since\nthen.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5402,
            "description": "Sets a hash of model attributes on the object, firing\n<code>\"change\"</code> unless you choose to silence it.\n\n<p>You can call it with an object containing keys and values, or with one\nkey and value.  For example:<pre>\n  gameTurn.set({\n    player: player1,\n    diceRoll: 2\n  }, {\n    error: function(gameTurnAgain, error) {\n      // The set failed validation.\n    }\n  });\n\n  game.set(\"currentPlayer\", player2, {\n    error: function(gameTurnAgain, error) {\n      // The set failed validation.\n    }\n  });\n\n  game.set(\"finished\", true);</pre></p>",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to give it."
                },
                {
                    "name": "options",
                    "description": "A set of Backbone-like options for the set.\n    The only supported options are <code>silent</code>,\n    <code>error</code>, and <code>promise</code>.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the set succeeded.",
                "type": "Boolean"
            },
            "see": [
                "Parse.Object#validate",
                "Parse.Error"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5546,
            "description": "Remove an attribute from the model, firing <code>\"change\"</code> unless\nyou choose to silence it. This is a noop if the attribute doesn't\nexist.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5557,
            "description": "Atomically increments the value of the given attribute the next time the\nobject is saved. If no amount is specified, 1 is used by default.",
            "params": [
                {
                    "name": "attr",
                    "description": "The key.",
                    "type": "String"
                },
                {
                    "name": "amount",
                    "description": "The amount to increment by.",
                    "type": "Number"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5571,
            "description": "Atomically add an object to the end of the array associated with a given\nkey.",
            "params": [
                {
                    "name": "attr",
                    "description": "The key.",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The item to add."
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5581,
            "description": "Atomically add an object to the array associated with a given key, only\nif it is not already present in the array. The position of the insert is\nnot guaranteed.",
            "params": [
                {
                    "name": "attr",
                    "description": "The key.",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The object to add."
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5593,
            "description": "Atomically remove all instances of an object from the array associated\nwith a given key.",
            "params": [
                {
                    "name": "attr",
                    "description": "The key.",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The object to remove."
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5604,
            "description": "Returns an instance of a subclass of Parse.Op describing what kind of\nmodification has been performed on this field since the last time it was\nsaved. For example, after calling object.increment(\"x\"), calling\nobject.op(\"x\") would return an instance of Parse.Op.Increment.",
            "params": [
                {
                    "name": "attr",
                    "description": "The key.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The operation, or undefined if none.",
                "type": "Parse.Op"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5617,
            "description": "Clear all attributes on the model, firing <code>\"change\"</code> unless\nyou choose to silence it.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5628,
            "description": "Returns a JSON-encoded set of operations to be sent with the next save\nrequest.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5640,
            "description": "Returns true if this object can be serialized for saving.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5647,
            "description": "Fetch the model from the server. If the server's representation of the\nmodel differs from its current attributes, they will be overriden,\ntriggering a <code>\"change\"</code> event.",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.\nValid options are:<ul>\n  <li>success: A Backbone-style success callback.\n  <li>error: An Backbone-style error callback.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled when the fetch\n    completes.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5678,
            "description": "Set a hash of model attributes, and save the model to the server.\nupdatedAt will be updated when the request returns.\nYou can either call it as:<pre>\n  object.save();</pre>\nor<pre>\n  object.save(null, options);</pre>\nor<pre>\n  object.save(attrs, options);</pre>\nor<pre>\n  object.save(key, value, options);</pre>\n\nFor example, <pre>\n  gameTurn.save({\n    player: \"Jake Cutter\",\n    diceRoll: 2\n  }, {\n    success: function(gameTurnAgain) {\n      // The save was successful.\n    },\n    error: function(gameTurnAgain, error) {\n      // The save failed.  Error is an instance of Parse.Error.\n    }\n  });</pre>\nor with promises:<pre>\n  gameTurn.save({\n    player: \"Jake Cutter\",\n    diceRoll: 2\n  }).then(function(gameTurnAgain) {\n    // The save was successful.\n  }, function(error) {\n    // The save failed.  Error is an instance of Parse.Error.\n  });</pre>",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.\nValid options are:<ul>\n  <li>wait: Set to true to wait for the server to confirm a successful\n  save before modifying the attributes on the object.\n  <li>silent: Set to true to avoid firing the `set` event.\n  <li>success: A Backbone-style success callback.\n  <li>error: An Backbone-style error callback.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled when the save\n    completes.",
                "type": "Parse.Promise"
            },
            "see": [
                "Parse.Error"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5844,
            "description": "Destroy this model on the server if it was already persisted.\nOptimistically removes the model from its collection, if it has one.\nIf `wait: true` is passed, waits for the server to respond\nbefore removal.",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style callback object.\nValid options are:<ul>\n  <li>wait: Set to true to wait for the server to confirm successful\n  deletion of the object before triggering the `destroy` event.\n  <li>success: A Backbone-style success callback\n  <li>error: An Backbone-style error callback.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled when the destroy\n    completes.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5893,
            "description": "Converts a response into the hash of attributes to be set on the model.",
            "ignore": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5913,
            "description": "Creates a new model with identical attributes to this one.",
            "return": {
                "description": "",
                "type": "Parse.Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5921,
            "description": "Returns true if this object has never been saved to Parse.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5929,
            "description": "Call this method to manually fire a `\"change\"` event for this model and\na `\"change:attribute\"` event for each changed attribute.\nCalling this will cause all objects observing the model to update.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5975,
            "description": "Returns true if this object was created by the Parse server when the\nobject might have already been there (e.g. in the case of a Facebook\nlogin)",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5984,
            "description": "Determine if the model has changed since the last <code>\"change\"</code>\nevent.  If you specify an attribute name, determine if that attribute\nhas changed.",
            "params": [
                {
                    "name": "attr",
                    "description": "Optional attribute name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 5998,
            "description": "Returns an object containing all the attributes that have changed, or\nfalse if there are no changed attributes. Useful for determining what\nparts of a view need to be updated and/or what attributes need to be\npersisted to the server. Unset attributes will be set to undefined.\nYou can also pass an attributes object to diff against the model,\ndetermining if there *would be* a change.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6020,
            "description": "Gets the previous value of an attribute, recorded at the time the last\n<code>\"change\"</code> event was fired.",
            "params": [
                {
                    "name": "attr",
                    "description": "Name of the attribute to get.",
                    "type": "String"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6032,
            "description": "Gets all of the attributes of the model at the time of the previous\n<code>\"change\"</code> event.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6041,
            "description": "Checks if the model is currently in a valid state. It's only possible to\nget into an *invalid* state if you're using silent changes.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6050,
            "description": "You should not call this function directly unless you subclass\n<code>Parse.Object</code>, in which case you can override this method\nto provide additional validation on <code>set</code> and\n<code>save</code>.  Your implementation should return",
            "params": [
                {
                    "name": "attrs",
                    "description": "The current data to validate.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "A Backbone-like options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "False if the data is valid.  An error object otherwise."
            },
            "see": [
                "Parse.Object#set"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6078,
            "description": "Run validation against a set of incoming attributes, returning `true`\nif all is well. If a specific `error` callback has been passed,\ncall that instead of firing the general `\"error\"` event.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6100,
            "description": "Returns the ACL for this object.",
            "return": {
                "description": "An instance of Parse.ACL.",
                "type": "Parse.ACL"
            },
            "see": [
                "Parse.Object#get"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6109,
            "description": "Sets the ACL to be used for this object.",
            "params": [
                {
                    "name": "acl",
                    "description": "An instance of Parse.ACL.",
                    "type": "Parse.ACL"
                },
                {
                    "name": "options",
                    "description": "Optional Backbone-like options object to be\n    passed in to set.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Whether the set passed validation.",
                "type": "Boolean"
            },
            "see": [
                "Parse.Object#set"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6123,
            "description": "Returns the appropriate subclass for making new instances of the given\nclassName string.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6139,
            "description": "Creates an instance of a subclass of Parse.Object for the given classname.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6147,
            "description": "Returns a list of object ids given a list of objects.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6177,
            "description": "Updates a list of objects with fetched results.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6201,
            "description": "Fetches the objects given in list.  The forceFetch option will fetch all\nobjects if true and ignore objects with data if false.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6235,
            "description": "Creates a new subclass of Parse.Object for the given Parse class name.\n\n<p>Every extension of a Parse class will inherit from the most recent\nprevious extension of that class. When a Parse.Object is automatically\ncreated by parsing JSON, it will use the most recent extension of that\nclass.</p>\n\n<p>You should call either:<pre>\n    var MyClass = Parse.Object.extend(\"MyClass\", {\n        <i>Instance methods</i>,\n        initialize: function(attrs, options) {\n            this.someInstanceProperty = [],\n            <i>Other instance properties</i>\n        }\n    }, {\n        <i>Class properties</i>\n    });</pre>\nor, for Backbone compatibility:<pre>\n    var MyClass = Parse.Object.extend({\n        className: \"MyClass\",\n        <i>Instance methods</i>,\n        initialize: function(attrs, options) {\n            this.someInstanceProperty = [],\n            <i>Other instance properties</i>\n        }\n    }, {\n        <i>Class properties</i>\n    });</pre></p>",
            "params": [
                {
                    "name": "className",
                    "description": "The name of the Parse class backing this model.",
                    "type": "String"
                },
                {
                    "name": "protoProps",
                    "description": "Instance properties to add to instances of the\n    class returned from this method.",
                    "type": "Object"
                },
                {
                    "name": "classProps",
                    "description": "Class properties to add the class returned from\n    this method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new subclass of Parse.Object.",
                "type": "Class"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6309,
            "description": "Creates a reference to a subclass of Parse.Object with the given id. This\ndoes not exist on Parse.Object, only on subclasses.\n\n<p>A shortcut for: <pre>\n var Foo = Parse.Object.extend(\"Foo\");\n var pointerToFoo = new Foo();\n pointerToFoo.id = \"myObjectId\";\n</pre>",
            "name": "",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the object to create a reference to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A Parse.Object reference.",
                "type": "Parse.Object"
            },
            "itemtype": "method",
            "memberof": "Parse.Object",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6382,
            "params": [
                {
                    "name": "object",
                    "description": "The root object.",
                    "type": "Object"
                },
                {
                    "name": "options:",
                    "description": "The only valid option is useMasterKey.",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6519,
            "description": "Constructs a new ParseRole with the given name and ACL.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the Role to create.",
                    "type": "String"
                },
                {
                    "name": "acl",
                    "description": "The ACL for this role. Roles must have an ACL.",
                    "type": "Parse.ACL"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..A Parse.Role is a local representation of a role persisted to the Parse\ncloud.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6535,
            "description": "Gets the name of the role.  You can alternatively call role.get(\"name\")",
            "return": {
                "description": "the name of the role.",
                "type": "String"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..A Parse.Role is a local representation of a role persisted to the Parse\ncloud.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6544,
            "description": "Sets the name for a role. This value must be set before the role has\nbeen saved to the server, and cannot be set once the role has been\nsaved.\n\n<p>\n  A role's name can only contain alphanumeric characters, _, -, and\n  spaces.\n</p>\n\n<p>This is equivalent to calling role.set(\"name\", name)</p>",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the role.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Standard options object with success and error\n    callbacks.",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..A Parse.Role is a local representation of a role persisted to the Parse\ncloud.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6564,
            "description": "Gets the Parse.Relation for the Parse.Users that are direct\nchildren of this role. These users are granted any privileges that this\nrole has been granted (e.g. read or write access through ACLs). You can\nadd or remove users from the role through this relation.\n\n<p>This is equivalent to calling role.relation(\"users\")</p>",
            "return": {
                "description": "the relation for the users belonging to this\n    role.",
                "type": "Parse.Relation"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..A Parse.Role is a local representation of a role persisted to the Parse\ncloud.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6579,
            "description": "Gets the Parse.Relation for the Parse.Roles that are direct\nchildren of this role. These roles' users are granted any privileges that\nthis role has been granted (e.g. read or write access through ACLs). You\ncan add or remove child roles from this role through this relation.\n\n<p>This is equivalent to calling role.relation(\"roles\")</p>",
            "return": {
                "description": "the relation for the roles belonging to this\n    role.",
                "type": "Parse.Relation"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..A Parse.Role is a local representation of a role persisted to the Parse\ncloud.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6594,
            "ignore": "",
            "class": "Provides an interface to Parse's logging and analytics backend..A Parse.Role is a local representation of a role persisted to the Parse\ncloud.",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6675,
            "description": "// The default model for a collection is just a Parse.Object.\n    // This should be overridden in most cases.\n    \n    model: Parse.Object,\n/**\n     * Initialize is an empty function by default. Override it with your own\n     * initialization logic.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6688,
            "description": "The JSON representation of a Collection is an array of the\nmodels' attributes.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6696,
            "description": "Add a model, or list of models to the set. Pass **silent** to avoid\nfiring the `add` event for every new model.",
            "params": [
                {
                    "name": "models",
                    "description": "An array of instances of <code>Parse.Object</code>.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "An optional object with Backbone-style options.\nValid options are:<ul>\n  <li>at: The index at which to add the models.\n  <li>silent: Set to true to avoid firing the `add` event for every new\n  model.\n</ul>",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6768,
            "description": "Remove a model, or a list of models from the set. Pass silent to avoid\nfiring the <code>remove</code> event for every model removed.",
            "params": [
                {
                    "name": "models",
                    "description": "The model or list of models to remove from the\n  collection.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "An optional object with Backbone-style options.\nValid options are: <ul>\n  <li>silent: Set to true to avoid firing the `remove` event.\n</ul>",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6802,
            "description": "Gets a model from the set by id.",
            "params": [
                {
                    "name": "id",
                    "description": "The Parse objectId identifying the Parse.Object to\nfetch from this collection.",
                    "type": "String"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6811,
            "description": "Gets a model from the set by client id.",
            "params": [
                {
                    "name": "cid",
                    "description": "The Backbone collection id identifying the Parse.Object to\nfetch from this collection."
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6820,
            "description": "Gets the model at the given index.",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the model to return.",
                    "type": "Number"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6829,
            "description": "Forces the collection to re-sort itself. You don't need to call this\nunder normal circumstances, as the set will maintain sort order as each\nitem is added.",
            "params": [
                {
                    "name": "options",
                    "description": "An optional object with Backbone-style options.\nValid options are: <ul>\n  <li>silent: Set to true to avoid firing the `reset` event.\n</ul>",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6855,
            "description": "Plucks an attribute from each model in the collection.",
            "params": [
                {
                    "name": "attr",
                    "description": "The attribute to return from each model in the\ncollection.",
                    "type": "String"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6864,
            "description": "When you have more items than you want to add or remove individually,\nyou can reset the entire set with a new list of models, without firing\nany `add` or `remove` events. Fires `reset` when finished.",
            "params": [
                {
                    "name": "models",
                    "description": "The model or list of models to remove from the\n  collection.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "An optional object with Backbone-style options.\nValid options are: <ul>\n  <li>silent: Set to true to avoid firing the `reset` event.\n</ul>",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6891,
            "description": "Fetches the default set of models for this collection, resetting the\ncollection when they arrive. If `add: true` is passed, appends the\nmodels to the collection instead of resetting.",
            "params": [
                {
                    "name": "options",
                    "description": "An optional object with Backbone-style options.\nValid options are:<ul>\n  <li>silent: Set to true to avoid firing `add` or `reset` events for\n  models fetched by this fetch.\n  <li>success: A Backbone-style success callback.\n  <li>error: An Backbone-style error callback.\n  <li>useMasterKey: In Cloud Code and Node only, uses the Master Key for\n      this request.\n</ul>",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6925,
            "description": "Creates a new instance of a model in this collection. Add the model to\nthe collection immediately, unless `wait: true` is passed, in which case\nwe wait for the server to agree.",
            "params": [
                {
                    "name": "model",
                    "description": "The new model to create and add to the\n  collection.",
                    "type": "Parse.Object"
                },
                {
                    "name": "options",
                    "description": "An optional object with Backbone-style options.\nValid options are:<ul>\n  <li>wait: Set to true to wait for the server to confirm creation of the\n      model before adding it to the collection.\n  <li>silent: Set to true to avoid firing an `add` event.\n  <li>success: A Backbone-style success callback.\n  <li>error: An Backbone-style error callback.\n  <li>useMasterKey: In Cloud Code and Node only, uses the Master Key for\n      this request.\n</ul>",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6968,
            "description": "Converts a response into a list of models to be added to the collection.\nThe default implementation is just to pass it through.",
            "ignore": "",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6977,
            "description": "Proxy to _'s chain. Can't be proxied the same way the rest of the\nunderscore methods are proxied because it relies on the underscore\nconstructor.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6986,
            "description": "Reset all internal state. Called when the collection is reset.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 6996,
            "description": "Prepare a model or hash of attributes to be added to this collection.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7013,
            "description": "Internal method to remove a model's ties to a collection.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7023,
            "description": "Internal method called every time a model in the set fires an event.\nSets need to update their indexes when models change ids. All other\nevents simply proxy through. \"add\" and \"remove\" events that originate\nin other collections are ignored.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7059,
            "description": "Creates a new subclass of <code>Parse.Collection</code>.  For example,<pre>\n  var MyCollection = Parse.Collection.extend({\n    // Instance properties\n\n    model: MyClass,\n    query: MyQuery,\n\n    getFirst: function() {\n      return this.at(0);\n    }\n  }, {\n    // Class properties\n\n    makeOne: function() {\n      return new MyCollection();\n    }\n  });\n\n  var collection = new MyCollection();\n</pre>",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "instanceProps",
                    "description": "Instance properties for the collection.",
                    "type": "Object"
                },
                {
                    "name": "classProps",
                    "description": "Class properies for the collection.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new subclass of <code>Parse.Collection</code>.",
                "type": "Class"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7126,
            "description": "// The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n/**\n     * jQuery delegate for element lookup, scoped to DOM elements within the\n     * current view. This should be prefered to global lookups where possible.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7139,
            "description": "Initialize is an empty function by default. Override it with your own\ninitialization logic.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7145,
            "description": "The core function that your view should override, in order\nto populate its element (`this.el`), with the appropriate HTML. The\nconvention is for **render** to always return `this`.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7154,
            "description": "Remove this view from the DOM. Note that the view isn't present in the\nDOM by default, so calling this method may be a no-op.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7163,
            "description": "For small amounts of DOM Elements, where a full-blown template isn't\nneeded, use **make** to manufacture elements, one at a time.\n<pre>\n    var el = this.make('li', {'class': 'row'},\n                       this.model.escape('title'));</pre>",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7181,
            "description": "Changes the view's element (`this.el` property), including event\nre-delegation.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7194,
            "description": "Set callbacks.  <code>this.events</code> is a hash of\n<pre>\n*{\"event selector\": \"callback\"}*\n\n    {\n      'mousedown .title':  'edit',\n      'click .button':     'save'\n      'click .open':       function(e) { ... }\n    }\n</pre>\npairs. Callbacks will be bound to the view, with `this` set properly.\nUses event delegation for efficiency.\nOmitting the selector binds the event to `this.el`.\nThis only works for delegate-able events: not `focus`, `blur`, and\nnot `change`, `submit`, and `reset` in Internet Explorer.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7237,
            "description": "Clears all callbacks previously bound to the view with `delegateEvents`.\nYou usually don't need to use this, but may wish to if you have multiple\nBackbone views attached to the same DOM element.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7246,
            "description": "Performs the initial configuration of a View with a set of options.\nKeys with special meaning *(model, collection, id, className)*, are\nattached directly to the view.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7264,
            "description": "Ensure that the View has a DOM element to render into.\nIf `this.el` is a string, pass it through `$()`, take the first\nmatching element, and re-assign it to `el`. Otherwise, create\nan element from the `id`, `className` and `tagName` properties.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7287,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "instanceProps",
                    "description": "Instance properties for the view.",
                    "type": "Object"
                },
                {
                    "name": "classProps",
                    "description": "Class properies for the view.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new subclass of <code>Parse.View</code>.",
                "type": "Class"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7318,
            "description": "Merges another object's attributes into this object.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7328,
            "description": "Internal method to handle special fields in a _User response.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7339,
            "description": "Removes null values from authData (which exist temporarily for\nunlinking)",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7358,
            "description": "Synchronizes authData for all providers.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7373,
            "description": "Synchronizes auth data for a provider (e.g. puts the access token in the\nright place to be used by the Facebook SDK).",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7414,
            "description": "Unlike in the Android/iOS SDKs, logInWith is unnecessary, since you can\ncall linkWith on the user (even if it doesn't exist yet on the server).",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7464,
            "description": "Unlinks a user from a service.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7487,
            "description": "Checks whether a user is linked to a service.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7501,
            "description": "Deauthenticates all providers.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7515,
            "description": "Deauthenticates a single provider (e.g. removing access tokens from the\nFacebook SDK).",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7531,
            "description": "Signs up a new user. You should call this instead of save for\nnew Parse.Users. This will create a new Parse.User on the server, and\nalso persist the session on disk so that you can access the user using\n<code>current</code>.\n\n<p>A username and password must be set before calling signUp.</p>\n\n<p>Calls options.success or options.error on completion.</p>",
            "params": [
                {
                    "name": "attrs",
                    "description": "Extra fields to set on the new user, or null.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled when the signup\n    finishes.",
                "type": "Parse.Promise"
            },
            "see": [
                "Parse.User.signUp"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7584,
            "description": "Logs in a Parse.User. On success, this saves the session to localStorage,\nso you can retrieve the currently logged in user using\n<code>current</code>.\n\n<p>A username and password must be set before calling logIn.</p>\n\n<p>Calls options.success or options.error on completion.</p>",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "see": [
                "Parse.User.logIn"
            ],
            "return": {
                "description": "A promise that is fulfilled with the user when\n    the login is complete.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7615,
            "see": [
                "Parse.Object#save"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7640,
            "see": [
                "Parse.Object#fetch"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7654,
            "description": "Returns true if <code>current</code> would return this user.",
            "see": [
                "Parse.User#current"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7662,
            "description": "Returns get(\"username\").",
            "return": {
                "description": "",
                "type": "String"
            },
            "see": [
                "Parse.Object#get"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7671,
            "description": "Calls set(\"username\", username, options) and returns the result.",
            "params": [
                {
                    "name": "username",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "see": [
                "Parse.Object.set"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7682,
            "description": "Calls set(\"password\", password, options) and returns the result.",
            "params": [
                {
                    "name": "password",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "see": [
                "Parse.Object.set"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7693,
            "description": "Returns get(\"email\").",
            "return": {
                "description": "",
                "type": "String"
            },
            "see": [
                "Parse.Object#get"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7702,
            "description": "Calls set(\"email\", email, options) and returns the result.",
            "params": [
                {
                    "name": "email",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "see": [
                "Parse.Object.set"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7713,
            "description": "Checks whether this user is the current user and has been authenticated.",
            "return": {
                "description": "(Boolean) whether this user is the current user and is logged in."
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7722,
            "description": "Returns the session token for this user, if the user has been logged in,\nor if it is the result of a query with the master key. Otherwise, returns\nundefined.",
            "return": {
                "description": "the session token, or undefined",
                "type": "String"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7732,
            "description": "Request a revocable session token to replace the older style of token.",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved when the replacement\n  token has been fetched.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7788,
            "description": "Signs up a new user with a username (or email) and password.\nThis will create a new Parse.User on the server, and also persist the\nsession in localStorage so that you can access the user using\n{@link #current}.\n\n<p>Calls options.success or options.error on completion.</p>",
            "params": [
                {
                    "name": "username",
                    "description": "The username (or email) to sign up with.",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "The password to sign up with.",
                    "type": "String"
                },
                {
                    "name": "attrs",
                    "description": "Extra fields to set on the new user.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled with the user when\n    the signup completes.",
                "type": "Parse.Promise"
            },
            "see": [
                "Parse.User#signUp"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7812,
            "description": "Logs in a user with a username (or email) and password. On success, this\nsaves the session to disk, so you can retrieve the currently logged in\nuser using <code>current</code>.\n\n<p>Calls options.success or options.error on completion.</p>",
            "params": [
                {
                    "name": "username",
                    "description": "The username (or email) to log in with.",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "The password to log in with.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled with the user when\n    the login completes.",
                "type": "Parse.Promise"
            },
            "see": [
                "Parse.User#logIn"
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7832,
            "description": "Logs in a user with a session token. On success, this saves the session\nto disk, so you can retrieve the currently logged in user using\n<code>current</code>.\n\n<p>Calls options.success or options.error on completion.</p>",
            "params": [
                {
                    "name": "sessionToken",
                    "description": "The sessionToken to log in with.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled with the user when\n    the login completes.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7863,
            "description": "Logs out the currently logged in user session. This will remove the\nsession from disk, log out of linked services, and future calls to\n<code>current</code> will return <code>null</code>.",
            "return": {
                "description": "A promise that is resolved when the session is\n  destroyed on the server.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7896,
            "description": "Requests a password reset email to be sent to the specified email address\nassociated with the user account. This email allows the user to securely\nreset their password on the Parse site.\n\n<p>Calls options.success or options.error on completion.</p>",
            "params": [
                {
                    "name": "email",
                    "description": "The email address associated with the user that\n    forgot their password.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7918,
            "description": "Retrieves the currently logged in ParseUser with a valid session,\neither from memory or localStorage, if necessary.",
            "return": {
                "description": "The currently logged in Parse.User.",
                "type": "Parse.Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 7964,
            "description": "Retrieves the currently logged in ParseUser from asynchronous Storage.",
            "return": {
                "description": "A Promise that is resolved with the currently\n  logged in Parse User",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8001,
            "description": "Allow someone to define a custom User class without className\nbeing rewritten to _User. The default behavior is to rewrite\nUser to _User for legacy reasons. This allows developers to\noverride that behavior.",
            "params": [
                {
                    "name": "isAllowed",
                    "description": "Whether or not to allow custom User class",
                    "type": "Boolean"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8013,
            "description": "Allow a legacy application to start using revocable sessions. If the\ncurrent session token is not revocable, a request will be made for a new,\nrevocable session.\nIt is not necessary to call this method from cloud code unless you are\nhandling user signup or login from the server side. In a cloud code call,\nthis function will not attempt to upgrade the current token.",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved when the process has\n  completed. If a replacement session token is requested, the promise\n  will be resolved after a new token has been fetched.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8035,
            "description": "Persists a user as currentUser to localStorage, and into the singleton.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8090,
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.Session object is a local representation of a revocable session.\nThis class is a subclass of a Parse.Object, and retains the same\nfunctionality of a Parse.Object.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8092,
            "description": "Returns the session token string.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.Session object is a local representation of a revocable session.\nThis class is a subclass of a Parse.Object, and retains the same\nfunctionality of a Parse.Object.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8100,
            "description": "Internal method to handle special fields in a _Session response.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.Session object is a local representation of a revocable session.\nThis class is a subclass of a Parse.Object, and retains the same\nfunctionality of a Parse.Object.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8122,
            "description": "Retrieves the Session object for the currently logged in session.",
            "return": {
                "description": "A promise that is resolved with the Parse.Session\n  object after it has been fetched.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.Session object is a local representation of a revocable session.\nThis class is a subclass of a Parse.Object, and retains the same\nfunctionality of a Parse.Object.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8145,
            "description": "Determines whether a session token is revocable.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.Session object is a local representation of a revocable session.\nThis class is a subclass of a Parse.Object, and retains the same\nfunctionality of a Parse.Object.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8153,
            "description": "Determines whether the current session token is revocable.\nThis method is useful for migrating Express.js or Node.js web apps to\nuse revocable sessions. If you are migrating an app that uses the Parse\nSDK in the browser only, please use Parse.User.enableRevocableSession()\ninstead, so that sessions can be automatically upgraded.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>A Parse.Session object is a local representation of a revocable session.\nThis class is a subclass of a Parse.Object, and retains the same\nfunctionality of a Parse.Object.</p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8249,
            "description": "Constructs a Parse.Query that is the OR of the passed in queries.  For\nexample:\n<pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\n\nwill create a compoundQuery that is an or of the query1, query2, and\nquery3.",
            "params": [
                {
                    "name": "var_args",
                    "description": "The list of queries to OR.",
                    "type": "...Parse.Query"
                }
            ],
            "return": {
                "description": "The query that is the OR of the passed in queries.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8277,
            "description": "Constructs a Parse.Object whose id is already known by fetching data from\nthe server.  Either options.success or options.error is called when the\nfind completes.",
            "params": [
                {
                    "name": "objectId",
                    "description": "The id of the object to be fetched.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object.\nValid options are:<ul>\n  <li>success: A Backbone-style success callback\n  <li>error: An Backbone-style error callback.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n</ul>",
                    "type": "Object"
                }
            ],
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8312,
            "description": "Returns a JSON representation of this query.",
            "return": {
                "description": "The JSON representation of the query.",
                "type": "Object"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8344,
            "description": "Retrieves a list of ParseObjects that satisfy this query.\nEither options.success or options.error is called when the find\ncompletes.",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object. Valid options\nare:<ul>\n  <li>success: Function to call when the find completes successfully.\n  <li>error: Function to call when the find fails.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved with the results when\nthe query completes.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8386,
            "description": "Counts the number of objects that match this query.\nEither options.success or options.error is called when the count\ncompletes.",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object. Valid options\nare:<ul>\n  <li>success: Function to call when the count completes successfully.\n  <li>error: Function to call when the find fails.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved with the count when\nthe query completes.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8422,
            "description": "Retrieves at most one Parse.Object that satisfies this query.\n\nEither options.success or options.error is called when it completes.\nsuccess is passed the object if there is one. otherwise, undefined.",
            "params": [
                {
                    "name": "options",
                    "description": "A Backbone-style options object. Valid options\nare:<ul>\n  <li>success: Function to call when the find completes successfully.\n  <li>error: Function to call when the find fails.\n  <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n    be used for this request.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is resolved with the object when\nthe query completes.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8467,
            "description": "Returns a new instance of Parse.Collection backed by this query.",
            "params": [
                {
                    "name": "items",
                    "description": "An array of instances of <code>Parse.Object</code>\n    with which to start this Collection.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "An optional object with Backbone-style options.\nValid options are:<ul>\n  <li>model: The Parse.Object subclass that this collection contains.\n  <li>query: An instance of Parse.Query to use when fetching items.\n  <li>comparator: A string property name or function to sort by.\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Parse.Collection"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8487,
            "description": "Sets the number of results to skip before returning any results.\nThis is useful for pagination.\nDefault is to skip zero results.",
            "params": [
                {
                    "name": "n",
                    "description": "the number of results to skip.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8499,
            "description": "Sets the limit of the number of results to return. The default limit is\n100, with a maximum of 1000 results being returned at a time.",
            "params": [
                {
                    "name": "n",
                    "description": "the number of results to limit to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8510,
            "description": "Add a constraint to the query that requires a particular key's value to\nbe equal to the provided value.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that the Parse.Object must contain."
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8526,
            "description": "Helper for condition queries",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8538,
            "description": "Add a constraint to the query that requires a particular key's value to\nbe not equal to the provided value.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that must not be equalled."
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8550,
            "description": "Add a constraint to the query that requires a particular key's value to\nbe less than the provided value.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that provides an upper bound."
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8562,
            "description": "Add a constraint to the query that requires a particular key's value to\nbe greater than the provided value.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that provides an lower bound."
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8574,
            "description": "Add a constraint to the query that requires a particular key's value to\nbe less than or equal to the provided value.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that provides an upper bound."
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8586,
            "description": "Add a constraint to the query that requires a particular key's value to\nbe greater than or equal to the provided value.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value that provides an lower bound."
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8598,
            "description": "Add a constraint to the query that requires a particular key's value to\nbe contained in the provided list of values.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "The values that will match.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8610,
            "description": "Add a constraint to the query that requires a particular key's value to\nnot be contained in the provided list of values.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "The values that will not match.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8622,
            "description": "Add a constraint to the query that requires a particular key's value to\ncontain each one of the provided list of values.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check.  This key's value must be an array.",
                    "type": "String"
                },
                {
                    "name": "values",
                    "description": "The values that will match.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8635,
            "description": "Add a constraint for finding objects that contain the given key.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that should exist.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8645,
            "description": "Add a constraint for finding objects that do not contain a given key.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that should not exist",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8655,
            "description": "Add a regular expression constraint for finding string values that match\nthe provided regular expression.\nThis may be slow for large datasets.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the string to match is stored in.",
                    "type": "String"
                },
                {
                    "name": "regex",
                    "description": "The regular expression pattern to match.",
                    "type": "RegExp"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8678,
            "description": "Add a constraint that requires that a key's value matches a Parse.Query\nconstraint.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the contains the object to match the\n                    query.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "The query that should match.",
                    "type": "Parse.Query"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8693,
            "description": "Add a constraint that requires that a key's value not matches a\nParse.Query constraint.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the contains the object to match the\n                    query.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "The query that should not match.",
                    "type": "Parse.Query"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8709,
            "description": "Add a constraint that requires that a key's value matches a value in\nan object returned by a different Parse.Query.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that contains the value that is being\n                    matched.",
                    "type": "String"
                },
                {
                    "name": "queryKey",
                    "description": "The key in the objects returned by the query to\n                         match against.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "The query to run.",
                    "type": "Parse.Query"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8727,
            "description": "Add a constraint that requires that a key's value not match a value in\nan object returned by a different Parse.Query.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that contains the value that is being\n                    excluded.",
                    "type": "String"
                },
                {
                    "name": "queryKey",
                    "description": "The key in the objects returned by the query to\n                         match against.",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "The query to run.",
                    "type": "Parse.Query"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8745,
            "description": "Add constraint that at least one of the passed in queries matches.",
            "params": [
                {
                    "name": "queries",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8759,
            "description": "Converts a string into a regex that matches it.\nSurrounding with \\Q .. \\E does this, we just need to escape \\E's in\nthe text separately.",
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8768,
            "description": "Add a constraint for finding string values that contain a provided\nstring.  This may be slow for large datasets.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the string to match is stored in.",
                    "type": "String"
                },
                {
                    "name": "substring",
                    "description": "The substring that the value must contain.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8780,
            "description": "Add a constraint for finding string values that start with a provided\nstring.  This query will use the backend index, so it will be fast even\nfor large datasets.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the string to match is stored in.",
                    "type": "String"
                },
                {
                    "name": "prefix",
                    "description": "The substring that the value must start with.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8793,
            "description": "Add a constraint for finding string values that end with a provided\nstring.  This will be slow for large datasets.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the string to match is stored in.",
                    "type": "String"
                },
                {
                    "name": "suffix",
                    "description": "The substring that the value must end with.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8805,
            "description": "Sorts the results in ascending order by the given key.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to order by, which is a \nstring of comma separated values, or an Array of keys, or multiple keys.",
                    "type": "(String|String[]|...String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8817,
            "description": "Sorts the results in ascending order by the given key, \nbut can also add secondary sort descriptors without overwriting _order.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to order by, which is a\nstring of comma separated values, or an Array of keys, or multiple keys.",
                    "type": "(String|String[]|...String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8839,
            "description": "Sorts the results in descending order by the given key.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to order by, which is a\nstring of comma separated values, or an Array of keys, or multiple keys.",
                    "type": "(String|String[]|...String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8851,
            "description": "Sorts the results in descending order by the given key,\nbut can also add secondary sort descriptors without overwriting _order.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to order by, which is a\nstring of comma separated values, or an Array of keys, or multiple keys.",
                    "type": "(String|String[]|...String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8875,
            "description": "Add a proximity based constraint for finding objects with key point\nvalues near the point given.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the Parse.GeoPoint is stored in.",
                    "type": "String"
                },
                {
                    "name": "point",
                    "description": "The reference Parse.GeoPoint that is used.",
                    "type": "Parse.GeoPoint"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8891,
            "description": "Add a proximity based constraint for finding objects with key point\nvalues near the point given and within the maximum distance given.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the Parse.GeoPoint is stored in.",
                    "type": "String"
                },
                {
                    "name": "point",
                    "description": "The reference Parse.GeoPoint that is used.",
                    "type": "Parse.GeoPoint"
                },
                {
                    "name": "maxDistance",
                    "description": "Maximum distance (in radians) of results to\n  return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8906,
            "description": "Add a proximity based constraint for finding objects with key point\nvalues near the point given and within the maximum distance given.\nRadius of earth used is 3958.8 miles.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the Parse.GeoPoint is stored in.",
                    "type": "String"
                },
                {
                    "name": "point",
                    "description": "The reference Parse.GeoPoint that is used.",
                    "type": "Parse.GeoPoint"
                },
                {
                    "name": "maxDistance",
                    "description": "Maximum distance (in miles) of results to\n    return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8920,
            "description": "Add a proximity based constraint for finding objects with key point\nvalues near the point given and within the maximum distance given.\nRadius of earth used is 6371.0 kilometers.",
            "params": [
                {
                    "name": "key",
                    "description": "The key that the Parse.GeoPoint is stored in.",
                    "type": "String"
                },
                {
                    "name": "point",
                    "description": "The reference Parse.GeoPoint that is used.",
                    "type": "Parse.GeoPoint"
                },
                {
                    "name": "maxDistance",
                    "description": "Maximum distance (in kilometers) of results\n    to return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8934,
            "description": "Add a constraint to the query that requires a particular key's\ncoordinates be contained within a given rectangular geographic bounding\nbox.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to be constrained.",
                    "type": "String"
                },
                {
                    "name": "southwest",
                    "description": "The lower-left inclusive corner of the box.",
                    "type": "Parse.GeoPoint"
                },
                {
                    "name": "northeast",
                    "description": "The upper-right inclusive corner of the box.",
                    "type": "Parse.GeoPoint"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8956,
            "description": "Include nested Parse.Objects for the provided key.  You can use dot\nnotation to specify which fields in the included object are also fetched.",
            "params": [
                {
                    "name": "key",
                    "description": "The name of the key to include.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8974,
            "description": "Restrict the fields of the returned Parse.Objects to include only the\nprovided keys.  If this is called multiple times, then all of the keys\nspecified in each of the calls will be included.",
            "params": [
                {
                    "name": "keys",
                    "description": "The names of the keys to include.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the query, so you can chain this call.",
                "type": "Parse.Query"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 8994,
            "description": "Iterates over each result of a query, calling a callback for each one. If\nthe callback returns a promise, the iteration will not continue until\nthat promise has been fulfilled. If the callback returns a rejected\npromise, then iteration will stop with that error. The items are\nprocessed in an unspecified order. The query may not have any sort order,\nand may not use limit or skip.",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback that will be called with each result\n    of the query.",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "An optional Backbone-like options object with\n    success and error callbacks that will be invoked once the iteration\n    has finished.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that will be fulfilled once the\n    iteration has completed.",
                "type": "Parse.Promise"
            },
            "class": "Provides an interface to Parse's logging and analytics backend..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides an interface to Parse's logging and analytics backend."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9133,
            "description": "Provides a set of utilities for using Parse with Facebook.",
            "class": "Provides a set of utilities for using Parse with Facebook..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides a set of utilities for using Parse with Facebook."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9139,
            "description": "Initializes Parse Facebook integration.  Call this function after you\nhave loaded the Facebook Javascript SDK with the same parameters\nas you would pass to<code>\n<a href=\n\"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\nFB.init()</a></code>.  Parse.FacebookUtils will invoke FB.init() for you\nwith these arguments.",
            "params": [
                {
                    "name": "options",
                    "description": "Facebook options argument as described here:\n  <a href=\n  \"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\n  FB.init()</a>. The status flag will be coerced to 'false' because it\n  interferes with Parse Facebook integration. Call FB.getLoginStatus()\n  explicitly if this behavior is required by your application.",
                    "type": "Object"
                }
            ],
            "class": "Provides a set of utilities for using Parse with Facebook..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides a set of utilities for using Parse with Facebook."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9173,
            "description": "Gets whether the user has their account linked to Facebook.",
            "params": [
                {
                    "name": "user",
                    "description": "User to check for a facebook link.\n    The user must be logged in on this device.",
                    "type": "Parse.User"
                }
            ],
            "return": {
                "description": "<code>true</code> if the user has their account\n    linked to Facebook.",
                "type": "Boolean"
            },
            "class": "Provides a set of utilities for using Parse with Facebook..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides a set of utilities for using Parse with Facebook."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9185,
            "description": "Logs in a user using Facebook. This method delegates to the Facebook\nSDK to authenticate the user, and then automatically logs in (or\ncreates, in the case where it is a new user) a Parse.User.",
            "params": [
                {
                    "name": "permissions",
                    "description": "The permissions required for Facebook\n   log in.  This is a comma-separated string of permissions.\n   Alternatively, supply a Facebook authData object as described in our\n   REST API docs if you want to handle getting facebook auth tokens\n   yourself.",
                    "type": "String, Object"
                },
                {
                    "name": "options",
                    "description": "Standard options object with success and error\n   callbacks.",
                    "type": "Object"
                }
            ],
            "class": "Provides a set of utilities for using Parse with Facebook..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides a set of utilities for using Parse with Facebook."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9212,
            "description": "Links Facebook to an existing PFUser. This method delegates to the\nFacebook SDK to authenticate the user, and then automatically links\nthe account to the Parse.User.",
            "params": [
                {
                    "name": "user",
                    "description": "User to link to Facebook. This must be the\n    current user.",
                    "type": "Parse.User"
                },
                {
                    "name": "permissions",
                    "description": "The permissions required for Facebook\n   log in.  This is a comma-separated string of permissions. \n   Alternatively, supply a Facebook authData object as described in our\n   REST API docs if you want to handle getting facebook auth tokens\n   yourself.",
                    "type": "String, Object"
                },
                {
                    "name": "options",
                    "description": "Standard options object with success and error\n   callbacks.",
                    "type": "Object"
                }
            ],
            "class": "Provides a set of utilities for using Parse with Facebook..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides a set of utilities for using Parse with Facebook."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9241,
            "description": "Unlinks the Parse.User from a Facebook account.",
            "params": [
                {
                    "name": "user",
                    "description": "User to unlink from Facebook. This must be the\n    current user.",
                    "type": "Parse.User"
                },
                {
                    "name": "options",
                    "description": "Standard options object with success and error\n   callbacks.",
                    "type": "Object"
                }
            ],
            "class": "Provides a set of utilities for using Parse with Facebook..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
            "namespace": "Provides a set of utilities for using Parse with Facebook."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9297,
            "description": "// The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n// Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(windowOverride) {\n      var loc = windowOverride ? windowOverride.location : window.location;\n      var match = loc.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n// Get the cross-browser normalized URL fragment, either from the URL,\n    // the hash, or the override.\n    getFragment: function(fragment, forcePushState) {\n      if (Parse._isNullOrUndefined(fragment)) {\n        if (this._hasPushState || forcePushState) {\n          fragment = window.location.pathname;\n          var search = window.location.search;\n          if (search) {\n            fragment += search;\n          }\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      if (!fragment.indexOf(this.options.root)) {\n        fragment = fragment.substr(this.options.root.length);\n      }\n      return fragment.replace(routeStripper, '');\n    },\n/**\n     * Start the hash change handling, returning `true` if the current\n     * URL matches an existing route, and `false` otherwise.",
            "class": "Provides a set of utilities for using Parse with Facebook..<p>A fork of Backbone.History, provided for your convenience.  If you \nuse this class, you must also include jQuery, or another library \nthat provides a jQuery-compatible $ function.  For more information,\nsee the <a href=\"http://documentcloud.github.com/backbone/#History\">\nBackbone documentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides a set of utilities for using Parse with Facebook."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9555,
            "description": "/**\n     * Initialize is an empty function by default. Override it with your own\n     * initialization logic.",
            "class": "Provides a set of utilities for using Parse with Facebook..<p>A fork of Backbone.Router, provided for your convenience.\nFor more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides a set of utilities for using Parse with Facebook."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9563,
            "description": "Manually bind a single named route to a callback. For example:\n\n<pre>this.route('search/:query/p:num', 'search', function(query, num) {\n      ...\n    });</pre>",
            "class": "Provides a set of utilities for using Parse with Facebook..<p>A fork of Backbone.Router, provided for your convenience.\nFor more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides a set of utilities for using Parse with Facebook."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9589,
            "description": "Whenever you reach a point in your application that you'd\nlike to save as a URL, call navigate in order to update the\nURL. If you wish to also call the route function, set the \ntrigger option to true. To update the URL without creating\nan entry in the browser's history, set the replace option\nto true.",
            "class": "Provides a set of utilities for using Parse with Facebook..<p>A fork of Backbone.Router, provided for your convenience.\nFor more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides a set of utilities for using Parse with Facebook."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9635,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "instanceProps",
                    "description": "Instance properties for the router.",
                    "type": "Object"
                },
                {
                    "name": "classProps",
                    "description": "Class properies for the router.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new subclass of <code>Parse.Router</code>.",
                "type": "Class"
            },
            "class": "Provides a set of utilities for using Parse with Facebook..<p>A fork of Backbone.Router, provided for your convenience.\nFor more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Provides a set of utilities for using Parse with Facebook."
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9648,
            "class": "Contains functions for calling and declaring\n<a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n<p><strong><em>\n  Some functions are only available from Cloud Code.\n</em></strong></p>.<p>A fork of Backbone.Router, provided for your convenience.\nFor more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Contains functions for calling and declaring\n<a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n<p><strong><em>\n  Some functions are only available from Cloud Code.\n</em></strong></p>"
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9658,
            "description": "Makes a call to a cloud function.",
            "params": [
                {
                    "name": "name",
                    "description": "The function name.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The parameters to send to the cloud function.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "A Backbone-style options object\noptions.success, if set, should be a function to handle a successful\ncall to a cloud function.  options.error should be a function that\nhandles an error running the cloud function.  Both functions are\noptional.  Both functions take a single argument.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that will be resolved with the result\nof the function.",
                "type": "Parse.Promise"
            },
            "class": "Contains functions for calling and declaring\n<a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n<p><strong><em>\n  Some functions are only available from Cloud Code.\n</em></strong></p>.<p>A fork of Backbone.Router, provided for your convenience.\nFor more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
            "namespace": "Contains functions for calling and declaring\n<a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n<p><strong><em>\n  Some functions are only available from Cloud Code.\n</em></strong></p>"
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9694,
            "description": "Contains functions to deal with Push in Parse",
            "name": "Parse.Push",
            "class": "Contains functions for calling and declaring\n<a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n<p><strong><em>\n  Some functions are only available from Cloud Code.\n</em></strong></p>.<p>A fork of Backbone.Router, provided for your convenience.\nFor more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>"
        },
        {
            "file": "js\\parse-1.4.2.js",
            "line": 9701,
            "description": "Sends a push notification.",
            "params": [
                {
                    "name": "data",
                    "description": "-  The data of the push notification.  Valid fields\nare:\n  <ol>\n    <li>channels - An Array of channels to push to.</li>\n    <li>push_time - A Date object for when to send the push.</li>\n    <li>expiration_time -  A Date object for when to expire\n        the push.</li>\n    <li>expiration_interval - The seconds from now to expire the push.</li>\n    <li>where - A Parse.Query over Parse.Installation that is used to match\n        a set of installations to push to.</li>\n    <li>data - The data to send as part of the push</li>\n  <ol>",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "An object that has an optional success function,\nthat takes no arguments and will be called on a successful push, and\nan error function that takes a Parse.Error and will be called if the push\nfailed.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that is fulfilled when the push request\n    completes.",
                "type": "Parse.Promise"
            },
            "class": "Contains functions for calling and declaring\n<a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n<p><strong><em>\n  Some functions are only available from Cloud Code.\n</em></strong></p>.<p>A fork of Backbone.Router, provided for your convenience.\nFor more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>"
        },
        {
            "file": "js\\services.js",
            "line": 15,
            "description": "Sirve para guardar toda la informacion de un usuario y guardarla en Parse",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "masterC",
                    "description": "Objeto con la informacion que se agregara<br>\n\t\t\t\tDebe tener los siguientes elementos:<br>\n\t\t\t\tnombre - Nombre del usuario al que hay que agregar<br>",
                    "type": "Object"
                },
                {
                    "name": "stripeId",
                    "description": "Id de el cliente de Stripe para agregar a la base de datos",
                    "type": "String"
                }
            ],
            "class": "Usuarios"
        },
        {
            "file": "js\\services.js",
            "line": 41,
            "description": "Sirve para regresar una variable de tipo query de usuarios",
            "itemtype": "method",
            "name": "get",
            "class": "Usuarios"
        },
        {
            "file": "js\\services.js",
            "line": 65,
            "description": "Sirve para regresar una variable de tipo query de los Chats para buscar todos los chats",
            "itemtype": "method",
            "name": "all",
            "class": "Chats"
        },
        {
            "file": "js\\services.js",
            "line": 77,
            "description": "Sirve para eliminar un chat en especifico",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "chatId",
                    "description": "Id del chat a eliminar",
                    "type": "String"
                }
            ],
            "class": "Chats"
        },
        {
            "file": "js\\services.js",
            "line": 99,
            "description": "Sirve para regresar una variable de tipo query de los Chats para buscar solo un chat en especifico",
            "itemtype": "method",
            "name": "get",
            "class": "Chats"
        },
        {
            "file": "js\\services.js",
            "line": 111,
            "description": "Sirve para agregar un chat",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "prueb",
                    "description": "Arreglo de valores a usar para agregar un nuevo Chat<br>\n\t\tDebe contener lo siguiente: <br>\n\t\t\tNombre - Nombre del Chat<br>\n\t\t\tImagen - URL hacia una imagen<br>\n\t\t\tUltimoMensaje - Caracteres de texto para indicar un mensaje o una descripcion<br>\n\t\t\tPrecio - Valor del Chat",
                    "type": "Array"
                }
            ],
            "class": "Chats"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: name",
            "line": " js\\parse-1.4.2.js:1250"
        },
        {
            "message": "unknown tag: ignore",
            "line": " js\\parse-1.4.2.js:1587"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\parse-1.4.2.js:1861"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2267"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2273"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2281"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2287"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2293"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2300"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2308"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2314"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2321"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2328"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2336"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2343"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2349"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2355"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2363"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2369"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2375"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2381"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2387"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2394"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2402"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2408"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2415"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2421"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2427"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2433"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2439"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2445"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2451"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2458"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2464"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2471"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2477"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2483"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2489"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2500"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2506"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2518"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2524"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2530"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2536"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2542"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2548"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2554"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2561"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2567"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2574"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2580"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2587"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2594"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2601"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2609"
        },
        {
            "message": "unknown tag: constant",
            "line": " js\\parse-1.4.2.js:2615"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " js\\parse-1.4.2.js:2773"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " js\\parse-1.4.2.js:2778"
        },
        {
            "message": "unknown tag: lends",
            "line": " js\\parse-1.4.2.js:2857"
        },
        {
            "message": "unknown tag: name",
            "line": " js\\parse-1.4.2.js:4731"
        },
        {
            "message": "unknown tag: field",
            "line": " js\\parse-1.4.2.js:4731"
        },
        {
            "message": "unknown tag: memberof",
            "line": " js\\parse-1.4.2.js:4731"
        },
        {
            "message": "unknown tag: name",
            "line": " js\\parse-1.4.2.js:4739"
        },
        {
            "message": "unknown tag: field",
            "line": " js\\parse-1.4.2.js:4739"
        },
        {
            "message": "unknown tag: memberof",
            "line": " js\\parse-1.4.2.js:4739"
        },
        {
            "message": "unknown tag: name",
            "line": " js\\parse-1.4.2.js:4747"
        },
        {
            "message": "unknown tag: field",
            "line": " js\\parse-1.4.2.js:4747"
        },
        {
            "message": "unknown tag: memberof",
            "line": " js\\parse-1.4.2.js:4747"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\parse-1.4.2.js:5604"
        },
        {
            "message": "unknown tag: ignore",
            "line": " js\\parse-1.4.2.js:5893"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\parse-1.4.2.js:6100"
        },
        {
            "message": "unknown tag: name",
            "line": " js\\parse-1.4.2.js:6309"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " js\\parse-1.4.2.js:6309"
        },
        {
            "message": "unknown tag: memberof",
            "line": " js\\parse-1.4.2.js:6309"
        },
        {
            "message": "unknown tag: ignore",
            "line": " js\\parse-1.4.2.js:6594"
        },
        {
            "message": "unknown tag: ignore",
            "line": " js\\parse-1.4.2.js:6968"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " js\\parse-1.4.2.js:7059"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " js\\parse-1.4.2.js:7287"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " js\\parse-1.4.2.js:9635"
        },
        {
            "message": "unknown tag: name",
            "line": " js\\parse-1.4.2.js:9694"
        },
        {
            "message": "Missing item type\nSirve para realizar la compra del articulo (teniendo la informacion de la tarjeta)",
            "line": " js\\controllers.js:208"
        },
        {
            "message": "Missing item type\nContains all Parse API classes and functions.",
            "line": " js\\parse-1.4.2.js:1250"
        },
        {
            "message": "Missing item type",
            "line": " js\\parse-1.4.2.js:1300"
        },
        {
            "message": "Missing item type\nCall this method first to set up your authentication tokens for Parse.\nYou can get your keys from the Data Browser on parse.com.",
            "line": " js\\parse-1.4.2.js:1343"
        },
        {
            "message": "Missing item type\nCall this method first to set up master authentication tokens for Parse.\nThis method is for Parse's own private use.",
            "line": " js\\parse-1.4.2.js:1358"
        },
        {
            "message": "Missing item type\nSwitches the Parse SDK to using the Master key.  The Master key grants\npriveleged access to the data in Parse and can be used to bypass ACLs and\nother restrictions that are applied to the client SDKs.\n<p><strong><em>Available in Cloud Code and Node.js only.</em></strong>\n</p>",
            "line": " js\\parse-1.4.2.js:1377"
        },
        {
            "message": "Missing item type\nReturns prefix for Storage keys used by this instance of Parse.",
            "line": " js\\parse-1.4.2.js:1389"
        },
        {
            "message": "Missing item type\nReturns a Promise that is resolved with the unique string for this app on\nthis machine.\nGets reset when Storage is cleared.",
            "line": " js\\parse-1.4.2.js:1411"
        },
        {
            "message": "Missing item type\nOptions:\n  route: is classes, users, login, etc.\n  objectId: null if there is no associated objectId.\n  method: the http method for the REST API.\n  dataObject: the payload as an object, or null if there is none.\n  useMasterKey: overrides whether to use the master key if set.",
            "line": " js\\parse-1.4.2.js:1587"
        },
        {
            "message": "Missing item type\nConverts a value in a Parse Object into the appropriate representation.\nThis is the JS equivalent of Java's Parse.maybeReferenceAndEncode(Object)\nif seenObjects is falsey. Otherwise any Parse.Objects not in\nseenObjects will be fully embedded rather than encoded\nas a pointer.  This array will be used to prevent going into an infinite\nloop because we have circular references.  If seenObjects\nis set, then none of the Parse Objects that are serialized can be dirty.",
            "line": " js\\parse-1.4.2.js:1718"
        },
        {
            "message": "Missing item type\nThe inverse function of Parse._encode.\nTODO: make decode not mutate value.",
            "line": " js\\parse-1.4.2.js:1787"
        },
        {
            "message": "Missing item type\nDoes a deep traversal of every item in object, calling func on every one.",
            "line": " js\\parse-1.4.2.js:1861"
        },
        {
            "message": "Missing item type\nThis is like _.each, except:\n* it doesn't work for so-called array-like objects,\n* it does work for dictionaries with a \"length\" attribute.",
            "line": " js\\parse-1.4.2.js:1906"
        },
        {
            "message": "Missing item type",
            "line": " js\\parse-1.4.2.js:2065"
        },
        {
            "message": "Missing item type\nTracks the occurrence of a custom event with additional dimensions.\nParse will store a data point at the time of invocation with the given\nevent name.\n\nDimensions will allow segmentation of the occurrences of this custom\nevent. Keys and values should be {@code String}s, and will throw\notherwise.\n\nTo track a user signup along with additional metadata, consider the\nfollowing:\n<pre>\nvar dimensions = {\n gender: 'm',\n source: 'web',\n dayType: 'weekend'\n};\nParse.Analytics.track('signup', dimensions);\n</pre>\n\nThere is a default limit of 8 dimensions per event tracked.",
            "line": " js\\parse-1.4.2.js:2071"
        },
        {
            "message": "Missing item type\nRetrieves the most recently-fetched configuration object, either from\nmemory or from local storage if necessary.",
            "line": " js\\parse-1.4.2.js:2140"
        },
        {
            "message": "Missing item type\nGets a new configuration object from the server.",
            "line": " js\\parse-1.4.2.js:2168"
        },
        {
            "message": "Missing item type\nGets the HTML-escaped value of an attribute.",
            "line": " js\\parse-1.4.2.js:2203"
        },
        {
            "message": "Missing item type\nGets the value of an attribute.",
            "line": " js\\parse-1.4.2.js:2222"
        },
        {
            "message": "Missing item type\nError code indicating some error other than those enumerated here.",
            "line": " js\\parse-1.4.2.js:2267"
        },
        {
            "message": "Missing item type\nError code indicating that something has gone wrong with the server.\nIf you get this error code, it is Parse's fault. Contact us at \nhttps://parse.com/help",
            "line": " js\\parse-1.4.2.js:2273"
        },
        {
            "message": "Missing item type\nError code indicating the connection to the Parse servers failed.",
            "line": " js\\parse-1.4.2.js:2281"
        },
        {
            "message": "Missing item type\nError code indicating the specified object doesn't exist.",
            "line": " js\\parse-1.4.2.js:2287"
        },
        {
            "message": "Missing item type\nError code indicating you tried to query with a datatype that doesn't\nsupport it, like exact matching an array or object.",
            "line": " js\\parse-1.4.2.js:2293"
        },
        {
            "message": "Missing item type\nError code indicating a missing or invalid classname. Classnames are\ncase-sensitive. They must start with a letter, and a-zA-Z0-9_ are the\nonly valid characters.",
            "line": " js\\parse-1.4.2.js:2300"
        },
        {
            "message": "Missing item type\nError code indicating an unspecified object id.",
            "line": " js\\parse-1.4.2.js:2308"
        },
        {
            "message": "Missing item type\nError code indicating an invalid key name. Keys are case-sensitive. They\nmust start with a letter, and a-zA-Z0-9_ are the only valid characters.",
            "line": " js\\parse-1.4.2.js:2314"
        },
        {
            "message": "Missing item type\nError code indicating a malformed pointer. You should not see this unless\nyou have been mucking about changing internal Parse code.",
            "line": " js\\parse-1.4.2.js:2321"
        },
        {
            "message": "Missing item type\nError code indicating that badly formed JSON was received upstream. This\neither indicates you have done something unusual with modifying how\nthings encode to JSON, or the network is failing badly.",
            "line": " js\\parse-1.4.2.js:2328"
        },
        {
            "message": "Missing item type\nError code indicating that the feature you tried to access is only\navailable internally for testing purposes.",
            "line": " js\\parse-1.4.2.js:2336"
        },
        {
            "message": "Missing item type\nYou must call Parse.initialize before using the Parse library.",
            "line": " js\\parse-1.4.2.js:2343"
        },
        {
            "message": "Missing item type\nError code indicating that a field was set to an inconsistent type.",
            "line": " js\\parse-1.4.2.js:2349"
        },
        {
            "message": "Missing item type\nError code indicating an invalid channel name. A channel name is either\nan empty string (the broadcast channel) or contains only a-zA-Z0-9_\ncharacters and starts with a letter.",
            "line": " js\\parse-1.4.2.js:2355"
        },
        {
            "message": "Missing item type\nError code indicating that push is misconfigured.",
            "line": " js\\parse-1.4.2.js:2363"
        },
        {
            "message": "Missing item type\nError code indicating that the object is too large.",
            "line": " js\\parse-1.4.2.js:2369"
        },
        {
            "message": "Missing item type\nError code indicating that the operation isn't allowed for clients.",
            "line": " js\\parse-1.4.2.js:2375"
        },
        {
            "message": "Missing item type\nError code indicating the result was not found in the cache.",
            "line": " js\\parse-1.4.2.js:2381"
        },
        {
            "message": "Missing item type\nError code indicating that an invalid key was used in a nested\nJSONObject.",
            "line": " js\\parse-1.4.2.js:2387"
        },
        {
            "message": "Missing item type\nError code indicating that an invalid filename was used for ParseFile.\nA valid file name contains only a-zA-Z0-9_. characters and is between 1\nand 128 characters.",
            "line": " js\\parse-1.4.2.js:2394"
        },
        {
            "message": "Missing item type\nError code indicating an invalid ACL was provided.",
            "line": " js\\parse-1.4.2.js:2402"
        },
        {
            "message": "Missing item type\nError code indicating that the request timed out on the server. Typically\nthis indicates that the request is too expensive to run.",
            "line": " js\\parse-1.4.2.js:2408"
        },
        {
            "message": "Missing item type\nError code indicating that the email address was invalid.",
            "line": " js\\parse-1.4.2.js:2415"
        },
        {
            "message": "Missing item type\nError code indicating a missing content type.",
            "line": " js\\parse-1.4.2.js:2421"
        },
        {
            "message": "Missing item type\nError code indicating a missing content length.",
            "line": " js\\parse-1.4.2.js:2427"
        },
        {
            "message": "Missing item type\nError code indicating an invalid content length.",
            "line": " js\\parse-1.4.2.js:2433"
        },
        {
            "message": "Missing item type\nError code indicating a file that was too large.",
            "line": " js\\parse-1.4.2.js:2439"
        },
        {
            "message": "Missing item type\nError code indicating an error saving a file.",
            "line": " js\\parse-1.4.2.js:2445"
        },
        {
            "message": "Missing item type\nError code indicating that a unique field was given a value that is\nalready taken.",
            "line": " js\\parse-1.4.2.js:2451"
        },
        {
            "message": "Missing item type\nError code indicating that a role's name is invalid.",
            "line": " js\\parse-1.4.2.js:2458"
        },
        {
            "message": "Missing item type\nError code indicating that an application quota was exceeded.  Upgrade to\nresolve.",
            "line": " js\\parse-1.4.2.js:2464"
        },
        {
            "message": "Missing item type\nError code indicating that a Cloud Code script failed.",
            "line": " js\\parse-1.4.2.js:2471"
        },
        {
            "message": "Missing item type\nError code indicating that a Cloud Code validation failed.",
            "line": " js\\parse-1.4.2.js:2477"
        },
        {
            "message": "Missing item type\nError code indicating that invalid image data was provided.",
            "line": " js\\parse-1.4.2.js:2483"
        },
        {
            "message": "Missing item type\nError code indicating an unsaved file.",
            "line": " js\\parse-1.4.2.js:2489"
        },
        {
            "message": "Missing item type\nError code indicating an invalid push time.",
            "line": " js\\parse-1.4.2.js:2495"
        },
        {
            "message": "Missing item type\nError code indicating an error deleting a file.",
            "line": " js\\parse-1.4.2.js:2500"
        },
        {
            "message": "Missing item type\nError code indicating that the application has exceeded its request\nlimit.",
            "line": " js\\parse-1.4.2.js:2506"
        },
        {
            "message": "Missing item type\nError code indicating an invalid event name.",
            "line": " js\\parse-1.4.2.js:2513"
        },
        {
            "message": "Missing item type\nError code indicating that the username is missing or empty.",
            "line": " js\\parse-1.4.2.js:2518"
        },
        {
            "message": "Missing item type\nError code indicating that the password is missing or empty.",
            "line": " js\\parse-1.4.2.js:2524"
        },
        {
            "message": "Missing item type\nError code indicating that the username has already been taken.",
            "line": " js\\parse-1.4.2.js:2530"
        },
        {
            "message": "Missing item type\nError code indicating that the email has already been taken.",
            "line": " js\\parse-1.4.2.js:2536"
        },
        {
            "message": "Missing item type\nError code indicating that the email is missing, but must be specified.",
            "line": " js\\parse-1.4.2.js:2542"
        },
        {
            "message": "Missing item type\nError code indicating that a user with the specified email was not found.",
            "line": " js\\parse-1.4.2.js:2548"
        },
        {
            "message": "Missing item type\nError code indicating that a user object without a valid session could\nnot be altered.",
            "line": " js\\parse-1.4.2.js:2554"
        },
        {
            "message": "Missing item type\nError code indicating that a user can only be created through signup.",
            "line": " js\\parse-1.4.2.js:2561"
        },
        {
            "message": "Missing item type\nError code indicating that an an account being linked is already linked\nto another user.",
            "line": " js\\parse-1.4.2.js:2567"
        },
        {
            "message": "Missing item type\nError code indicating that the current session token is invalid.",
            "line": " js\\parse-1.4.2.js:2574"
        },
        {
            "message": "Missing item type\nError code indicating that a user cannot be linked to an account because\nthat account's id could not be found.",
            "line": " js\\parse-1.4.2.js:2580"
        },
        {
            "message": "Missing item type\nError code indicating that a user with a linked (e.g. Facebook) account\nhas an invalid session.",
            "line": " js\\parse-1.4.2.js:2587"
        },
        {
            "message": "Missing item type\nError code indicating that a service being linked (e.g. Facebook or\nTwitter) is unsupported.",
            "line": " js\\parse-1.4.2.js:2594"
        },
        {
            "message": "Missing item type\nError code indicating that there were multiple errors. Aggregate errors\nhave an \"errors\" property, which is an array of error objects with more\ndetail about each error that occurred.",
            "line": " js\\parse-1.4.2.js:2601"
        },
        {
            "message": "Missing item type\nError code indicating the client was unable to read an input file.",
            "line": " js\\parse-1.4.2.js:2609"
        },
        {
            "message": "Missing item type\nError code indicating a real error code is unavailable because\nwe had to use an XDomainRequest object to allow CORS requests in\nInternet Explorer, which strips the body from HTTP responses that have\na non-2XX status code.",
            "line": " js\\parse-1.4.2.js:2615"
        },
        {
            "message": "Missing item type\nBind one or more space separated events, `events`, to a `callback`\nfunction. Passing `\"all\"` will bind the callback to all events fired.",
            "line": " js\\parse-1.4.2.js:2657"
        },
        {
            "message": "Missing item type\nRemove one or many callbacks. If `context` is null, removes all callbacks\nwith that function. If `callback` is null, removes all callbacks for the\nevent. If `events` is null, removes all bound callbacks for all events.",
            "line": " js\\parse-1.4.2.js:2687"
        },
        {
            "message": "Missing item type\nTrigger one or many events, firing all bound callbacks. Callbacks are\npassed the same arguments as `trigger` is, apart from the event name\n(unless you're listening on `\"all\"`, which will cause your callback to\nreceive the true name of the event as the first argument).",
            "line": " js\\parse-1.4.2.js:2732"
        },
        {
            "message": "Missing item type\nThrows an exception if the given lat-long is out of bounds.",
            "line": " js\\parse-1.4.2.js:2865"
        },
        {
            "message": "Missing item type\nCreates a GeoPoint with the user's current location, if available.\nCalls options.success with a new GeoPoint instance or calls options.error.",
            "line": " js\\parse-1.4.2.js:2883"
        },
        {
            "message": "Missing item type\nReturns a JSON representation of the GeoPoint, suitable for Parse.",
            "line": " js\\parse-1.4.2.js:2904"
        },
        {
            "message": "Missing item type\nReturns the distance from this GeoPoint to another in radians.",
            "line": " js\\parse-1.4.2.js:2917"
        },
        {
            "message": "Missing item type\nReturns the distance from this GeoPoint to another in kilometers.",
            "line": " js\\parse-1.4.2.js:2940"
        },
        {
            "message": "Missing item type\nReturns the distance from this GeoPoint to another in miles.",
            "line": " js\\parse-1.4.2.js:2949"
        },
        {
            "message": "Missing item type\nReturns a JSON-encoded version of the ACL.",
            "line": " js\\parse-1.4.2.js:3012"
        },
        {
            "message": "Missing item type\nSet whether the given user is allowed to read this object.",
            "line": " js\\parse-1.4.2.js:3066"
        },
        {
            "message": "Missing item type\nGet whether the given user id is *explicitly* allowed to read this object.\nEven if this returns false, the user may still be able to access it if\ngetPublicReadAccess returns true or a role that the user belongs to has\nwrite access.",
            "line": " js\\parse-1.4.2.js:3075"
        },
        {
            "message": "Missing item type\nSet whether the given user id is allowed to write this object.",
            "line": " js\\parse-1.4.2.js:3087"
        },
        {
            "message": "Missing item type\nGet whether the given user id is *explicitly* allowed to write this object.\nEven if this returns false, the user may still be able to write it if\ngetPublicWriteAccess returns true or a role that the user belongs to has\nwrite access.",
            "line": " js\\parse-1.4.2.js:3096"
        },
        {
            "message": "Missing item type\nSet whether the public is allowed to read this object.",
            "line": " js\\parse-1.4.2.js:3108"
        },
        {
            "message": "Missing item type\nGet whether the public is allowed to read this object.",
            "line": " js\\parse-1.4.2.js:3116"
        },
        {
            "message": "Missing item type\nSet whether the public is allowed to write this object.",
            "line": " js\\parse-1.4.2.js:3124"
        },
        {
            "message": "Missing item type\nGet whether the public is allowed to write this object.",
            "line": " js\\parse-1.4.2.js:3132"
        },
        {
            "message": "Missing item type\nGet whether users belonging to the given role are allowed\nto read this object. Even if this returns false, the role may\nstill be able to write it if a parent role has read access.",
            "line": " js\\parse-1.4.2.js:3140"
        },
        {
            "message": "Missing item type\nGet whether users belonging to the given role are allowed\nto write this object. Even if this returns false, the role may\nstill be able to write it if a parent role has write access.",
            "line": " js\\parse-1.4.2.js:3160"
        },
        {
            "message": "Missing item type\nSet whether users belonging to the given role are allowed\nto read this object.",
            "line": " js\\parse-1.4.2.js:3180"
        },
        {
            "message": "Missing item type\nSet whether users belonging to the given role are allowed\nto write this object.",
            "line": " js\\parse-1.4.2.js:3200"
        },
        {
            "message": "Missing item type\nTo create a new Op, call Parse.Op._extend();",
            "line": " js\\parse-1.4.2.js:3248"
        },
        {
            "message": "Missing item type\nRegisters a function to convert a json object with an __op field into an\ninstance of a subclass of Parse.Op.",
            "line": " js\\parse-1.4.2.js:3256"
        },
        {
            "message": "Missing item type\nConverts a json object into an instance of a subclass of Parse.Op.",
            "line": " js\\parse-1.4.2.js:3264"
        },
        {
            "message": "Missing item type\nReturns the new value of this field after the set.",
            "line": " js\\parse-1.4.2.js:3300"
        },
        {
            "message": "Missing item type\nReturns a JSON version of the operation suitable for sending to Parse.",
            "line": " js\\parse-1.4.2.js:3307"
        },
        {
            "message": "Missing item type\nA sentinel value that is returned by Parse.Op.Unset._estimate to\nindicate the field should be deleted. Basically, if you find _UNSET as a\nvalue in your object, you should remove that key.",
            "line": " js\\parse-1.4.2.js:3324"
        },
        {
            "message": "Missing item type\nReturns a JSON version of the operation suitable for sending to Parse.",
            "line": " js\\parse-1.4.2.js:3337"
        },
        {
            "message": "Missing item type\n_initialize: function(amount) {\n      this._amount = amount;\n    },\n/**\n     * Returns the amount to increment by.\n     * @return {Number} the amount to increment by.",
            "line": " js\\parse-1.4.2.js:3364"
        },
        {
            "message": "Missing item type\nReturns a JSON version of the operation suitable for sending to Parse.",
            "line": " js\\parse-1.4.2.js:3378"
        },
        {
            "message": "Missing item type\nReturns the objects to be added to the array.",
            "line": " js\\parse-1.4.2.js:3422"
        },
        {
            "message": "Missing item type\nReturns a JSON version of the operation suitable for sending to Parse.",
            "line": " js\\parse-1.4.2.js:3430"
        },
        {
            "message": "Missing item type\n_initialize: function(objects) {\n      this._objects = _.uniq(objects);\n    },\n/**\n     * Returns the objects to be added to the array.\n     * @return {Array} The objects to be added to the array.",
            "line": " js\\parse-1.4.2.js:3472"
        },
        {
            "message": "Missing item type\nReturns a JSON version of the operation suitable for sending to Parse.",
            "line": " js\\parse-1.4.2.js:3486"
        },
        {
            "message": "Missing item type\nReturns the objects to be removed from the array.",
            "line": " js\\parse-1.4.2.js:3550"
        },
        {
            "message": "Missing item type\nReturns a JSON version of the operation suitable for sending to Parse.",
            "line": " js\\parse-1.4.2.js:3558"
        },
        {
            "message": "Missing item type\n_initialize: function(adds, removes) {\n      this._targetClassName = null;\n  var self = this;\n  var pointerToId = function(object) {\n        if (object instanceof Parse.Object) {\n          if (!object.id) {\n            throw \"You can't add an unsaved Parse.Object to a relation.\";\n          }\n          if (!self._targetClassName) {\n            self._targetClassName = object.className;\n          }\n          if (self._targetClassName !== object.className) {\n            throw \"Tried to create a Parse.Relation with 2 different types: \" +\n                  self._targetClassName + \" and \" + object.className + \".\";\n          }\n          return object.id;\n        }\n        return object;\n      };\n  this.relationsToAdd = _.uniq(_.map(adds, pointerToId));\n      this.relationsToRemove = _.uniq(_.map(removes, pointerToId));\n    },\n/**\n     * Returns an array of unfetched Parse.Object that are being added to the\n     * relation.\n     * @return {Array}",
            "line": " js\\parse-1.4.2.js:3609"
        },
        {
            "message": "Missing item type\nReturns an array of unfetched Parse.Object that are being removed from\nthe relation.",
            "line": " js\\parse-1.4.2.js:3651"
        },
        {
            "message": "Missing item type\nReturns a JSON version of the operation suitable for sending to Parse.",
            "line": " js\\parse-1.4.2.js:3665"
        },
        {
            "message": "Missing item type\nMakes sure that this relation has the right parent and key.",
            "line": " js\\parse-1.4.2.js:3780"
        },
        {
            "message": "Missing item type\nAdds a Parse.Object or an array of Parse.Objects to the relation.",
            "line": " js\\parse-1.4.2.js:3794"
        },
        {
            "message": "Missing item type\nRemoves a Parse.Object or an array of Parse.Objects from this relation.",
            "line": " js\\parse-1.4.2.js:3808"
        },
        {
            "message": "Missing item type\nReturns a JSON version of the object suitable for saving to disk.",
            "line": " js\\parse-1.4.2.js:3822"
        },
        {
            "message": "Missing item type\nReturns a Parse.Query that is limited to objects in this\nrelation.",
            "line": " js\\parse-1.4.2.js:3830"
        },
        {
            "message": "Missing item type\nReturns true iff the given object fulfils the Promise interface.",
            "line": " js\\parse-1.4.2.js:3887"
        },
        {
            "message": "Missing item type\nReturns a new promise that is resolved with a given value.",
            "line": " js\\parse-1.4.2.js:3895"
        },
        {
            "message": "Missing item type\nReturns a new promise that is rejected with a given error.",
            "line": " js\\parse-1.4.2.js:3905"
        },
        {
            "message": "Missing item type\nReturns a new promise that is fulfilled when all of the input promises\nare resolved. If any promise in the list fails, then the returned promise\nwill fail with the last error. If they all succeed, then the returned\npromise will succeed, with the results being the results of all the input\npromises. For example: <pre>\n  var p1 = Parse.Promise.as(1);\n  var p2 = Parse.Promise.as(2);\n  var p3 = Parse.Promise.as(3);\n\n  Parse.Promise.when(p1, p2, p3).then(function(r1, r2, r3) {\n    console.log(r1);  // prints 1\n    console.log(r2);  // prints 2\n    console.log(r3);  // prints 3\n  });</pre>\n\nThe input promises can also be specified as an array: <pre>\n  var promises = [p1, p2, p3];\n  Parse.Promise.when(promises).then(function(r1, r2, r3) {\n    console.log(r1);  // prints 1\n    console.log(r2);  // prints 2\n    console.log(r3);  // prints 3\n  });\n</pre>",
            "line": " js\\parse-1.4.2.js:3915"
        },
        {
            "message": "Missing item type\nRuns the given asyncFunction repeatedly, as long as the predicate\nfunction returns a truthy value. Stops repeating if asyncFunction returns\na rejected promise.",
            "line": " js\\parse-1.4.2.js:3994"
        },
        {
            "message": "Missing item type\nMarks this promise as fulfilled, firing any callbacks waiting on it.",
            "line": " js\\parse-1.4.2.js:4013"
        },
        {
            "message": "Missing item type\nMarks this promise as fulfilled, firing any callbacks waiting on it.",
            "line": " js\\parse-1.4.2.js:4032"
        },
        {
            "message": "Missing item type\nAdds callbacks to be called when this promise is fulfilled. Returns a new\nPromise that will be fulfilled when the callback is complete. It allows\nchaining. If the callback itself returns a Promise, then the one returned\nby \"then\" will not be fulfilled until that one returned by the callback\nis fulfilled.",
            "line": " js\\parse-1.4.2.js:4050"
        },
        {
            "message": "Missing item type\nAdd handlers to be called when the promise \nis either resolved or rejected",
            "line": " js\\parse-1.4.2.js:4158"
        },
        {
            "message": "Missing item type\nAdd handlers to be called when the Promise object is resolved",
            "line": " js\\parse-1.4.2.js:4166"
        },
        {
            "message": "Missing item type\nAdd handlers to be called when the Promise object is rejected",
            "line": " js\\parse-1.4.2.js:4173"
        },
        {
            "message": "Missing item type\nRun the given callbacks after this promise is fulfilled.",
            "line": " js\\parse-1.4.2.js:4180"
        },
        {
            "message": "Missing item type\nAdds a callback function that should be called regardless of whether\nthis promise failed or succeeded. The callback will be given either the\narray of results for its first argument, or the error as its second,\ndepending on whether this Promise was rejected or resolved. Returns a\nnew Promise, like \"then\" would.",
            "line": " js\\parse-1.4.2.js:4232"
        },
        {
            "message": "Missing item type\nReads a File using a FileReader.",
            "line": " js\\parse-1.4.2.js:4499"
        },
        {
            "message": "Missing item type\nGets the name of the file. Before save is called, this is the filename\ngiven by the user. After save is called, that name gets prefixed with a\nunique identifier.",
            "line": " js\\parse-1.4.2.js:4604"
        },
        {
            "message": "Missing item type\nGets the url of the file. It is only available after you save the file or\nafter you get the file from a Parse.Object.",
            "line": " js\\parse-1.4.2.js:4613"
        },
        {
            "message": "Missing item type\nSaves the file to the Parse cloud.",
            "line": " js\\parse-1.4.2.js:4622"
        },
        {
            "message": "Missing item type\nThe ID of this object, unique within its class.",
            "line": " js\\parse-1.4.2.js:4731"
        },
        {
            "message": "Missing item type\nThe first time this object was saved on the server.",
            "line": " js\\parse-1.4.2.js:4739"
        },
        {
            "message": "Missing item type\nThe last time this object was updated on the server.",
            "line": " js\\parse-1.4.2.js:4747"
        },
        {
            "message": "Missing item type\nSaves the given list of Parse.Object.\nIf any error is encountered, stops and calls the error handler.\n\n<pre>\n  Parse.Object.saveAll([object1, object2, ...], {\n    success: function(list) {\n      // All the objects were saved.\n    },\n    error: function(error) {\n      // An error occurred while saving one of the objects.\n    },\n  });\n</pre>",
            "line": " js\\parse-1.4.2.js:4755"
        },
        {
            "message": "Missing item type\nDestroy the given list of models on the server if it was already persisted.\nOptimistically removes each model from its collection, if it has one.\nIf `wait: true` is passed, waits for the server to respond before removal.\n\n<p>Unlike saveAll, if an error occurs while deleting an individual model,\nthis method will continue trying to delete the rest of the models if\npossible, except in the case of a fatal error like a connection error.\n\n<p>In particular, the Parse.Error object returned in the case of error may\nbe one of two types:\n\n<ul>\n  <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\n      array of other Parse.Error objects. Each error object in this array\n      has an \"object\" property that references the object that could not be\n      deleted (for instance, because that object could not be found).</li>\n  <li>A non-aggregate Parse.Error. This indicates a serious error that\n      caused the delete operation to be aborted partway through (for\n      instance, a connection failure in the middle of the delete).</li>\n</ul>\n\n<pre>\n  Parse.Object.destroyAll([object1, object2, ...], {\n    success: function() {\n      // All the objects were deleted.\n    },\n    error: function(error) {\n      // An error occurred while deleting one or more of the objects.\n      // If this is an aggregate error, then we can inspect each error\n      // object individually to determine the reason why a particular\n      // object was not deleted.\n      if (error.code == Parse.Error.AGGREGATE_ERROR) {\n        for (var i = 0; i < error.errors.length; i++) {\n          console.log(\"Couldn't delete \" + error.errors[i].object.id +\n            \"due to \" + error.errors[i].message);\n        }\n      } else {\n        console.log(\"Delete aborted because of \" + error.message);\n      }\n    },\n  });\n</pre>",
            "line": " js\\parse-1.4.2.js:4784"
        },
        {
            "message": "Missing item type\nFetches the given list of Parse.Object.\nIf any error is encountered, stops and calls the error handler.\n\n<pre>\n  Parse.Object.fetchAll([object1, object2, ...], {\n    success: function(list) {\n      // All the objects were fetched.\n    },\n    error: function(error) {\n      // An error occurred while fetching one of the objects.\n    },\n  });\n</pre>",
            "line": " js\\parse-1.4.2.js:4915"
        },
        {
            "message": "Missing item type\nFetches the given list of Parse.Object if needed.\nIf any error is encountered, stops and calls the error handler.\n\n<pre>\n  Parse.Object.fetchAllIfNeeded([object1, ...], {\n    success: function(list) {\n      // Objects were fetched and updated.\n    },\n    error: function(error) {\n      // An error occurred while fetching one of the objects.\n    },\n  });\n</pre>",
            "line": " js\\parse-1.4.2.js:4944"
        },
        {
            "message": "Missing item type\n_existed: false,\n\n/**\n * Initialize is an empty function by default. Override it with your own\n * initialization logic.",
            "line": " js\\parse-1.4.2.js:4975"
        },
        {
            "message": "Missing item type\nReturns a JSON version of the object suitable for saving to Parse.",
            "line": " js\\parse-1.4.2.js:4984"
        },
        {
            "message": "Missing item type\nUpdates _hashedJSON to reflect the current state of this object.\nAdds any changed hash values to the set of pending changes.",
            "line": " js\\parse-1.4.2.js:5027"
        },
        {
            "message": "Missing item type\nReturns true if this object has been modified since its last\nsave/refresh.  If an attribute is specified, it returns true only if that\nparticular attribute has been modified since the last save/refresh.",
            "line": " js\\parse-1.4.2.js:5059"
        },
        {
            "message": "Missing item type\nReturns an array of keys that have been modified since last save/refresh",
            "line": " js\\parse-1.4.2.js:5083"
        },
        {
            "message": "Missing item type\nGets a Pointer referencing this Object.",
            "line": " js\\parse-1.4.2.js:5091"
        },
        {
            "message": "Missing item type\nGets the value of an attribute.",
            "line": " js\\parse-1.4.2.js:5103"
        },
        {
            "message": "Missing item type\nGets a relation on the given class for the attribute.",
            "line": " js\\parse-1.4.2.js:5111"
        },
        {
            "message": "Missing item type\nGets the HTML-escaped value of an attribute.",
            "line": " js\\parse-1.4.2.js:5128"
        },
        {
            "message": "Missing item type\nReturns <code>true</code> if the attribute contains a value that is not\nnull or undefined.",
            "line": " js\\parse-1.4.2.js:5147"
        },
        {
            "message": "Missing item type\nPulls \"special\" fields like objectId, createdAt, etc. out of attrs\nand puts them on \"this\" directly.  Removes them from attrs.",
            "line": " js\\parse-1.4.2.js:5157"
        },
        {
            "message": "Missing item type\nCopies the given serverData to \"this\", refreshes attributes, and\nclears pending changes;",
            "line": " js\\parse-1.4.2.js:5181"
        },
        {
            "message": "Missing item type\nMerges another object's attributes into this object.",
            "line": " js\\parse-1.4.2.js:5205"
        },
        {
            "message": "Missing item type\nReturns the json to be sent to the server.",
            "line": " js\\parse-1.4.2.js:5223"
        },
        {
            "message": "Missing item type\nCalled when a save fails because of an error. Any changes that were part\nof the save need to be merged with changes made after the save. This\nmight throw an exception is you do conflicting operations. For example,\nif you do:\n  object.set(\"foo\", \"bar\");\n  object.set(\"invalid field name\", \"baz\");\n  object.save();\n  object.increment(\"foo\");\nthen this will throw when the save fails and the client tries to merge\n\"bar\" with the +1.",
            "line": " js\\parse-1.4.2.js:5230"
        },
        {
            "message": "Missing item type\nCalled when a save completes successfully. This merges the changes that\nwere saved into the known server data, and overrides it with any data\nsent directly from the server.",
            "line": " js\\parse-1.4.2.js:5259"
        },
        {
            "message": "Missing item type\nCalled when a fetch or login is complete to set the known server data to\nthe given object.",
            "line": " js\\parse-1.4.2.js:5299"
        },
        {
            "message": "Missing item type\nApplies the set of Parse.Op in opSet to the object target.",
            "line": " js\\parse-1.4.2.js:5314"
        },
        {
            "message": "Missing item type\nReplaces the cached value for key with the current value.\nReturns true if the new value is different than the old value.",
            "line": " js\\parse-1.4.2.js:5327"
        },
        {
            "message": "Missing item type\nPopulates attributes[key] by starting with the last known data from the\nserver, and applying all of the local changes that have been made to that\nkey since then.",
            "line": " js\\parse-1.4.2.js:5347"
        },
        {
            "message": "Missing item type\nPopulates attributes by starting with the last known data from the\nserver, and applying all of the local changes that have been made since\nthen.",
            "line": " js\\parse-1.4.2.js:5371"
        },
        {
            "message": "Missing item type\nSets a hash of model attributes on the object, firing\n<code>\"change\"</code> unless you choose to silence it.\n\n<p>You can call it with an object containing keys and values, or with one\nkey and value.  For example:<pre>\n  gameTurn.set({\n    player: player1,\n    diceRoll: 2\n  }, {\n    error: function(gameTurnAgain, error) {\n      // The set failed validation.\n    }\n  });\n\n  game.set(\"currentPlayer\", player2, {\n    error: function(gameTurnAgain, error) {\n      // The set failed validation.\n    }\n  });\n\n  game.set(\"finished\", true);</pre></p>",
            "line": " js\\parse-1.4.2.js:5402"
        },
        {
            "message": "Missing item type\nRemove an attribute from the model, firing <code>\"change\"</code> unless\nyou choose to silence it. This is a noop if the attribute doesn't\nexist.",
            "line": " js\\parse-1.4.2.js:5546"
        },
        {
            "message": "Missing item type\nAtomically increments the value of the given attribute the next time the\nobject is saved. If no amount is specified, 1 is used by default.",
            "line": " js\\parse-1.4.2.js:5557"
        },
        {
            "message": "Missing item type\nAtomically add an object to the end of the array associated with a given\nkey.",
            "line": " js\\parse-1.4.2.js:5571"
        },
        {
            "message": "Missing item type\nAtomically add an object to the array associated with a given key, only\nif it is not already present in the array. The position of the insert is\nnot guaranteed.",
            "line": " js\\parse-1.4.2.js:5581"
        },
        {
            "message": "Missing item type\nAtomically remove all instances of an object from the array associated\nwith a given key.",
            "line": " js\\parse-1.4.2.js:5593"
        },
        {
            "message": "Missing item type\nReturns an instance of a subclass of Parse.Op describing what kind of\nmodification has been performed on this field since the last time it was\nsaved. For example, after calling object.increment(\"x\"), calling\nobject.op(\"x\") would return an instance of Parse.Op.Increment.",
            "line": " js\\parse-1.4.2.js:5604"
        },
        {
            "message": "Missing item type\nClear all attributes on the model, firing <code>\"change\"</code> unless\nyou choose to silence it.",
            "line": " js\\parse-1.4.2.js:5617"
        },
        {
            "message": "Missing item type\nReturns a JSON-encoded set of operations to be sent with the next save\nrequest.",
            "line": " js\\parse-1.4.2.js:5628"
        },
        {
            "message": "Missing item type\nReturns true if this object can be serialized for saving.",
            "line": " js\\parse-1.4.2.js:5640"
        },
        {
            "message": "Missing item type\nFetch the model from the server. If the server's representation of the\nmodel differs from its current attributes, they will be overriden,\ntriggering a <code>\"change\"</code> event.",
            "line": " js\\parse-1.4.2.js:5647"
        },
        {
            "message": "Missing item type\nSet a hash of model attributes, and save the model to the server.\nupdatedAt will be updated when the request returns.\nYou can either call it as:<pre>\n  object.save();</pre>\nor<pre>\n  object.save(null, options);</pre>\nor<pre>\n  object.save(attrs, options);</pre>\nor<pre>\n  object.save(key, value, options);</pre>\n\nFor example, <pre>\n  gameTurn.save({\n    player: \"Jake Cutter\",\n    diceRoll: 2\n  }, {\n    success: function(gameTurnAgain) {\n      // The save was successful.\n    },\n    error: function(gameTurnAgain, error) {\n      // The save failed.  Error is an instance of Parse.Error.\n    }\n  });</pre>\nor with promises:<pre>\n  gameTurn.save({\n    player: \"Jake Cutter\",\n    diceRoll: 2\n  }).then(function(gameTurnAgain) {\n    // The save was successful.\n  }, function(error) {\n    // The save failed.  Error is an instance of Parse.Error.\n  });</pre>",
            "line": " js\\parse-1.4.2.js:5678"
        },
        {
            "message": "Missing item type\nDestroy this model on the server if it was already persisted.\nOptimistically removes the model from its collection, if it has one.\nIf `wait: true` is passed, waits for the server to respond\nbefore removal.",
            "line": " js\\parse-1.4.2.js:5844"
        },
        {
            "message": "Missing item type\nConverts a response into the hash of attributes to be set on the model.",
            "line": " js\\parse-1.4.2.js:5893"
        },
        {
            "message": "Missing item type\nCreates a new model with identical attributes to this one.",
            "line": " js\\parse-1.4.2.js:5913"
        },
        {
            "message": "Missing item type\nReturns true if this object has never been saved to Parse.",
            "line": " js\\parse-1.4.2.js:5921"
        },
        {
            "message": "Missing item type\nCall this method to manually fire a `\"change\"` event for this model and\na `\"change:attribute\"` event for each changed attribute.\nCalling this will cause all objects observing the model to update.",
            "line": " js\\parse-1.4.2.js:5929"
        },
        {
            "message": "Missing item type\nReturns true if this object was created by the Parse server when the\nobject might have already been there (e.g. in the case of a Facebook\nlogin)",
            "line": " js\\parse-1.4.2.js:5975"
        },
        {
            "message": "Missing item type\nDetermine if the model has changed since the last <code>\"change\"</code>\nevent.  If you specify an attribute name, determine if that attribute\nhas changed.",
            "line": " js\\parse-1.4.2.js:5984"
        },
        {
            "message": "Missing item type\nReturns an object containing all the attributes that have changed, or\nfalse if there are no changed attributes. Useful for determining what\nparts of a view need to be updated and/or what attributes need to be\npersisted to the server. Unset attributes will be set to undefined.\nYou can also pass an attributes object to diff against the model,\ndetermining if there *would be* a change.",
            "line": " js\\parse-1.4.2.js:5998"
        },
        {
            "message": "Missing item type\nGets the previous value of an attribute, recorded at the time the last\n<code>\"change\"</code> event was fired.",
            "line": " js\\parse-1.4.2.js:6020"
        },
        {
            "message": "Missing item type\nGets all of the attributes of the model at the time of the previous\n<code>\"change\"</code> event.",
            "line": " js\\parse-1.4.2.js:6032"
        },
        {
            "message": "Missing item type\nChecks if the model is currently in a valid state. It's only possible to\nget into an *invalid* state if you're using silent changes.",
            "line": " js\\parse-1.4.2.js:6041"
        },
        {
            "message": "Missing item type\nYou should not call this function directly unless you subclass\n<code>Parse.Object</code>, in which case you can override this method\nto provide additional validation on <code>set</code> and\n<code>save</code>.  Your implementation should return",
            "line": " js\\parse-1.4.2.js:6050"
        },
        {
            "message": "Missing item type\nRun validation against a set of incoming attributes, returning `true`\nif all is well. If a specific `error` callback has been passed,\ncall that instead of firing the general `\"error\"` event.",
            "line": " js\\parse-1.4.2.js:6078"
        },
        {
            "message": "Missing item type\nReturns the ACL for this object.",
            "line": " js\\parse-1.4.2.js:6100"
        },
        {
            "message": "Missing item type\nSets the ACL to be used for this object.",
            "line": " js\\parse-1.4.2.js:6109"
        },
        {
            "message": "Missing item type\nReturns the appropriate subclass for making new instances of the given\nclassName string.",
            "line": " js\\parse-1.4.2.js:6123"
        },
        {
            "message": "Missing item type\nCreates an instance of a subclass of Parse.Object for the given classname.",
            "line": " js\\parse-1.4.2.js:6139"
        },
        {
            "message": "Missing item type\nReturns a list of object ids given a list of objects.",
            "line": " js\\parse-1.4.2.js:6147"
        },
        {
            "message": "Missing item type\nUpdates a list of objects with fetched results.",
            "line": " js\\parse-1.4.2.js:6177"
        },
        {
            "message": "Missing item type\nFetches the objects given in list.  The forceFetch option will fetch all\nobjects if true and ignore objects with data if false.",
            "line": " js\\parse-1.4.2.js:6201"
        },
        {
            "message": "Missing item type\nCreates a new subclass of Parse.Object for the given Parse class name.\n\n<p>Every extension of a Parse class will inherit from the most recent\nprevious extension of that class. When a Parse.Object is automatically\ncreated by parsing JSON, it will use the most recent extension of that\nclass.</p>\n\n<p>You should call either:<pre>\n    var MyClass = Parse.Object.extend(\"MyClass\", {\n        <i>Instance methods</i>,\n        initialize: function(attrs, options) {\n            this.someInstanceProperty = [],\n            <i>Other instance properties</i>\n        }\n    }, {\n        <i>Class properties</i>\n    });</pre>\nor, for Backbone compatibility:<pre>\n    var MyClass = Parse.Object.extend({\n        className: \"MyClass\",\n        <i>Instance methods</i>,\n        initialize: function(attrs, options) {\n            this.someInstanceProperty = [],\n            <i>Other instance properties</i>\n        }\n    }, {\n        <i>Class properties</i>\n    });</pre></p>",
            "line": " js\\parse-1.4.2.js:6235"
        },
        {
            "message": "Missing item type",
            "line": " js\\parse-1.4.2.js:6382"
        },
        {
            "message": "Missing item type\nConstructs a new ParseRole with the given name and ACL.",
            "line": " js\\parse-1.4.2.js:6519"
        },
        {
            "message": "Missing item type\nGets the name of the role.  You can alternatively call role.get(\"name\")",
            "line": " js\\parse-1.4.2.js:6535"
        },
        {
            "message": "Missing item type\nSets the name for a role. This value must be set before the role has\nbeen saved to the server, and cannot be set once the role has been\nsaved.\n\n<p>\n  A role's name can only contain alphanumeric characters, _, -, and\n  spaces.\n</p>\n\n<p>This is equivalent to calling role.set(\"name\", name)</p>",
            "line": " js\\parse-1.4.2.js:6544"
        },
        {
            "message": "Missing item type\nGets the Parse.Relation for the Parse.Users that are direct\nchildren of this role. These users are granted any privileges that this\nrole has been granted (e.g. read or write access through ACLs). You can\nadd or remove users from the role through this relation.\n\n<p>This is equivalent to calling role.relation(\"users\")</p>",
            "line": " js\\parse-1.4.2.js:6564"
        },
        {
            "message": "Missing item type\nGets the Parse.Relation for the Parse.Roles that are direct\nchildren of this role. These roles' users are granted any privileges that\nthis role has been granted (e.g. read or write access through ACLs). You\ncan add or remove child roles from this role through this relation.\n\n<p>This is equivalent to calling role.relation(\"roles\")</p>",
            "line": " js\\parse-1.4.2.js:6579"
        },
        {
            "message": "Missing item type",
            "line": " js\\parse-1.4.2.js:6594"
        },
        {
            "message": "Missing item type\n// The default model for a collection is just a Parse.Object.\n    // This should be overridden in most cases.\n    \n    model: Parse.Object,\n/**\n     * Initialize is an empty function by default. Override it with your own\n     * initialization logic.",
            "line": " js\\parse-1.4.2.js:6675"
        },
        {
            "message": "Missing item type\nThe JSON representation of a Collection is an array of the\nmodels' attributes.",
            "line": " js\\parse-1.4.2.js:6688"
        },
        {
            "message": "Missing item type\nAdd a model, or list of models to the set. Pass **silent** to avoid\nfiring the `add` event for every new model.",
            "line": " js\\parse-1.4.2.js:6696"
        },
        {
            "message": "Missing item type\nRemove a model, or a list of models from the set. Pass silent to avoid\nfiring the <code>remove</code> event for every model removed.",
            "line": " js\\parse-1.4.2.js:6768"
        },
        {
            "message": "Missing item type\nGets a model from the set by id.",
            "line": " js\\parse-1.4.2.js:6802"
        },
        {
            "message": "Missing item type\nGets a model from the set by client id.",
            "line": " js\\parse-1.4.2.js:6811"
        },
        {
            "message": "Missing item type\nGets the model at the given index.",
            "line": " js\\parse-1.4.2.js:6820"
        },
        {
            "message": "Missing item type\nForces the collection to re-sort itself. You don't need to call this\nunder normal circumstances, as the set will maintain sort order as each\nitem is added.",
            "line": " js\\parse-1.4.2.js:6829"
        },
        {
            "message": "Missing item type\nPlucks an attribute from each model in the collection.",
            "line": " js\\parse-1.4.2.js:6855"
        },
        {
            "message": "Missing item type\nWhen you have more items than you want to add or remove individually,\nyou can reset the entire set with a new list of models, without firing\nany `add` or `remove` events. Fires `reset` when finished.",
            "line": " js\\parse-1.4.2.js:6864"
        },
        {
            "message": "Missing item type\nFetches the default set of models for this collection, resetting the\ncollection when they arrive. If `add: true` is passed, appends the\nmodels to the collection instead of resetting.",
            "line": " js\\parse-1.4.2.js:6891"
        },
        {
            "message": "Missing item type\nCreates a new instance of a model in this collection. Add the model to\nthe collection immediately, unless `wait: true` is passed, in which case\nwe wait for the server to agree.",
            "line": " js\\parse-1.4.2.js:6925"
        },
        {
            "message": "Missing item type\nConverts a response into a list of models to be added to the collection.\nThe default implementation is just to pass it through.",
            "line": " js\\parse-1.4.2.js:6968"
        },
        {
            "message": "Missing item type\nProxy to _'s chain. Can't be proxied the same way the rest of the\nunderscore methods are proxied because it relies on the underscore\nconstructor.",
            "line": " js\\parse-1.4.2.js:6977"
        },
        {
            "message": "Missing item type\nReset all internal state. Called when the collection is reset.",
            "line": " js\\parse-1.4.2.js:6986"
        },
        {
            "message": "Missing item type\nPrepare a model or hash of attributes to be added to this collection.",
            "line": " js\\parse-1.4.2.js:6996"
        },
        {
            "message": "Missing item type\nInternal method to remove a model's ties to a collection.",
            "line": " js\\parse-1.4.2.js:7013"
        },
        {
            "message": "Missing item type\nInternal method called every time a model in the set fires an event.\nSets need to update their indexes when models change ids. All other\nevents simply proxy through. \"add\" and \"remove\" events that originate\nin other collections are ignored.",
            "line": " js\\parse-1.4.2.js:7023"
        },
        {
            "message": "Missing item type\n// The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n/**\n     * jQuery delegate for element lookup, scoped to DOM elements within the\n     * current view. This should be prefered to global lookups where possible.",
            "line": " js\\parse-1.4.2.js:7126"
        },
        {
            "message": "Missing item type\nInitialize is an empty function by default. Override it with your own\ninitialization logic.",
            "line": " js\\parse-1.4.2.js:7139"
        },
        {
            "message": "Missing item type\nThe core function that your view should override, in order\nto populate its element (`this.el`), with the appropriate HTML. The\nconvention is for **render** to always return `this`.",
            "line": " js\\parse-1.4.2.js:7145"
        },
        {
            "message": "Missing item type\nRemove this view from the DOM. Note that the view isn't present in the\nDOM by default, so calling this method may be a no-op.",
            "line": " js\\parse-1.4.2.js:7154"
        },
        {
            "message": "Missing item type\nFor small amounts of DOM Elements, where a full-blown template isn't\nneeded, use **make** to manufacture elements, one at a time.\n<pre>\n    var el = this.make('li', {'class': 'row'},\n                       this.model.escape('title'));</pre>",
            "line": " js\\parse-1.4.2.js:7163"
        },
        {
            "message": "Missing item type\nChanges the view's element (`this.el` property), including event\nre-delegation.",
            "line": " js\\parse-1.4.2.js:7181"
        },
        {
            "message": "Missing item type\nSet callbacks.  <code>this.events</code> is a hash of\n<pre>\n*{\"event selector\": \"callback\"}*\n\n    {\n      'mousedown .title':  'edit',\n      'click .button':     'save'\n      'click .open':       function(e) { ... }\n    }\n</pre>\npairs. Callbacks will be bound to the view, with `this` set properly.\nUses event delegation for efficiency.\nOmitting the selector binds the event to `this.el`.\nThis only works for delegate-able events: not `focus`, `blur`, and\nnot `change`, `submit`, and `reset` in Internet Explorer.",
            "line": " js\\parse-1.4.2.js:7194"
        },
        {
            "message": "Missing item type\nClears all callbacks previously bound to the view with `delegateEvents`.\nYou usually don't need to use this, but may wish to if you have multiple\nBackbone views attached to the same DOM element.",
            "line": " js\\parse-1.4.2.js:7237"
        },
        {
            "message": "Missing item type\nPerforms the initial configuration of a View with a set of options.\nKeys with special meaning *(model, collection, id, className)*, are\nattached directly to the view.",
            "line": " js\\parse-1.4.2.js:7246"
        },
        {
            "message": "Missing item type\nEnsure that the View has a DOM element to render into.\nIf `this.el` is a string, pass it through `$()`, take the first\nmatching element, and re-assign it to `el`. Otherwise, create\nan element from the `id`, `className` and `tagName` properties.",
            "line": " js\\parse-1.4.2.js:7264"
        },
        {
            "message": "Missing item type\nMerges another object's attributes into this object.",
            "line": " js\\parse-1.4.2.js:7318"
        },
        {
            "message": "Missing item type\nInternal method to handle special fields in a _User response.",
            "line": " js\\parse-1.4.2.js:7328"
        },
        {
            "message": "Missing item type\nRemoves null values from authData (which exist temporarily for\nunlinking)",
            "line": " js\\parse-1.4.2.js:7339"
        },
        {
            "message": "Missing item type\nSynchronizes authData for all providers.",
            "line": " js\\parse-1.4.2.js:7358"
        },
        {
            "message": "Missing item type\nSynchronizes auth data for a provider (e.g. puts the access token in the\nright place to be used by the Facebook SDK).",
            "line": " js\\parse-1.4.2.js:7373"
        },
        {
            "message": "Missing item type\nUnlike in the Android/iOS SDKs, logInWith is unnecessary, since you can\ncall linkWith on the user (even if it doesn't exist yet on the server).",
            "line": " js\\parse-1.4.2.js:7414"
        },
        {
            "message": "Missing item type\nUnlinks a user from a service.",
            "line": " js\\parse-1.4.2.js:7464"
        },
        {
            "message": "Missing item type\nChecks whether a user is linked to a service.",
            "line": " js\\parse-1.4.2.js:7487"
        },
        {
            "message": "Missing item type\nDeauthenticates all providers.",
            "line": " js\\parse-1.4.2.js:7501"
        },
        {
            "message": "Missing item type\nDeauthenticates a single provider (e.g. removing access tokens from the\nFacebook SDK).",
            "line": " js\\parse-1.4.2.js:7515"
        },
        {
            "message": "Missing item type\nSigns up a new user. You should call this instead of save for\nnew Parse.Users. This will create a new Parse.User on the server, and\nalso persist the session on disk so that you can access the user using\n<code>current</code>.\n\n<p>A username and password must be set before calling signUp.</p>\n\n<p>Calls options.success or options.error on completion.</p>",
            "line": " js\\parse-1.4.2.js:7531"
        },
        {
            "message": "Missing item type\nLogs in a Parse.User. On success, this saves the session to localStorage,\nso you can retrieve the currently logged in user using\n<code>current</code>.\n\n<p>A username and password must be set before calling logIn.</p>\n\n<p>Calls options.success or options.error on completion.</p>",
            "line": " js\\parse-1.4.2.js:7584"
        },
        {
            "message": "Missing item type",
            "line": " js\\parse-1.4.2.js:7615"
        },
        {
            "message": "Missing item type",
            "line": " js\\parse-1.4.2.js:7640"
        },
        {
            "message": "Missing item type\nReturns true if <code>current</code> would return this user.",
            "line": " js\\parse-1.4.2.js:7654"
        },
        {
            "message": "Missing item type\nReturns get(\"username\").",
            "line": " js\\parse-1.4.2.js:7662"
        },
        {
            "message": "Missing item type\nCalls set(\"username\", username, options) and returns the result.",
            "line": " js\\parse-1.4.2.js:7671"
        },
        {
            "message": "Missing item type\nCalls set(\"password\", password, options) and returns the result.",
            "line": " js\\parse-1.4.2.js:7682"
        },
        {
            "message": "Missing item type\nReturns get(\"email\").",
            "line": " js\\parse-1.4.2.js:7693"
        },
        {
            "message": "Missing item type\nCalls set(\"email\", email, options) and returns the result.",
            "line": " js\\parse-1.4.2.js:7702"
        },
        {
            "message": "Missing item type\nChecks whether this user is the current user and has been authenticated.",
            "line": " js\\parse-1.4.2.js:7713"
        },
        {
            "message": "Missing item type\nReturns the session token for this user, if the user has been logged in,\nor if it is the result of a query with the master key. Otherwise, returns\nundefined.",
            "line": " js\\parse-1.4.2.js:7722"
        },
        {
            "message": "Missing item type\nRequest a revocable session token to replace the older style of token.",
            "line": " js\\parse-1.4.2.js:7732"
        },
        {
            "message": "Missing item type\nSigns up a new user with a username (or email) and password.\nThis will create a new Parse.User on the server, and also persist the\nsession in localStorage so that you can access the user using\n{@link #current}.\n\n<p>Calls options.success or options.error on completion.</p>",
            "line": " js\\parse-1.4.2.js:7788"
        },
        {
            "message": "Missing item type\nLogs in a user with a username (or email) and password. On success, this\nsaves the session to disk, so you can retrieve the currently logged in\nuser using <code>current</code>.\n\n<p>Calls options.success or options.error on completion.</p>",
            "line": " js\\parse-1.4.2.js:7812"
        },
        {
            "message": "Missing item type\nLogs in a user with a session token. On success, this saves the session\nto disk, so you can retrieve the currently logged in user using\n<code>current</code>.\n\n<p>Calls options.success or options.error on completion.</p>",
            "line": " js\\parse-1.4.2.js:7832"
        },
        {
            "message": "Missing item type\nLogs out the currently logged in user session. This will remove the\nsession from disk, log out of linked services, and future calls to\n<code>current</code> will return <code>null</code>.",
            "line": " js\\parse-1.4.2.js:7863"
        },
        {
            "message": "Missing item type\nRequests a password reset email to be sent to the specified email address\nassociated with the user account. This email allows the user to securely\nreset their password on the Parse site.\n\n<p>Calls options.success or options.error on completion.</p>",
            "line": " js\\parse-1.4.2.js:7896"
        },
        {
            "message": "Missing item type\nRetrieves the currently logged in ParseUser with a valid session,\neither from memory or localStorage, if necessary.",
            "line": " js\\parse-1.4.2.js:7918"
        },
        {
            "message": "Missing item type\nRetrieves the currently logged in ParseUser from asynchronous Storage.",
            "line": " js\\parse-1.4.2.js:7964"
        },
        {
            "message": "Missing item type\nAllow someone to define a custom User class without className\nbeing rewritten to _User. The default behavior is to rewrite\nUser to _User for legacy reasons. This allows developers to\noverride that behavior.",
            "line": " js\\parse-1.4.2.js:8001"
        },
        {
            "message": "Missing item type\nAllow a legacy application to start using revocable sessions. If the\ncurrent session token is not revocable, a request will be made for a new,\nrevocable session.\nIt is not necessary to call this method from cloud code unless you are\nhandling user signup or login from the server side. In a cloud code call,\nthis function will not attempt to upgrade the current token.",
            "line": " js\\parse-1.4.2.js:8013"
        },
        {
            "message": "Missing item type\nPersists a user as currentUser to localStorage, and into the singleton.",
            "line": " js\\parse-1.4.2.js:8035"
        },
        {
            "message": "Missing item type",
            "line": " js\\parse-1.4.2.js:8090"
        },
        {
            "message": "Missing item type\nReturns the session token string.",
            "line": " js\\parse-1.4.2.js:8092"
        },
        {
            "message": "Missing item type\nInternal method to handle special fields in a _Session response.",
            "line": " js\\parse-1.4.2.js:8100"
        },
        {
            "message": "Missing item type\nRetrieves the Session object for the currently logged in session.",
            "line": " js\\parse-1.4.2.js:8122"
        },
        {
            "message": "Missing item type\nDetermines whether a session token is revocable.",
            "line": " js\\parse-1.4.2.js:8145"
        },
        {
            "message": "Missing item type\nDetermines whether the current session token is revocable.\nThis method is useful for migrating Express.js or Node.js web apps to\nuse revocable sessions. If you are migrating an app that uses the Parse\nSDK in the browser only, please use Parse.User.enableRevocableSession()\ninstead, so that sessions can be automatically upgraded.",
            "line": " js\\parse-1.4.2.js:8153"
        },
        {
            "message": "Missing item type\nConstructs a Parse.Query that is the OR of the passed in queries.  For\nexample:\n<pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\n\nwill create a compoundQuery that is an or of the query1, query2, and\nquery3.",
            "line": " js\\parse-1.4.2.js:8249"
        },
        {
            "message": "Missing item type\nConstructs a Parse.Object whose id is already known by fetching data from\nthe server.  Either options.success or options.error is called when the\nfind completes.",
            "line": " js\\parse-1.4.2.js:8277"
        },
        {
            "message": "Missing item type\nReturns a JSON representation of this query.",
            "line": " js\\parse-1.4.2.js:8312"
        },
        {
            "message": "Missing item type\nRetrieves a list of ParseObjects that satisfy this query.\nEither options.success or options.error is called when the find\ncompletes.",
            "line": " js\\parse-1.4.2.js:8344"
        },
        {
            "message": "Missing item type\nCounts the number of objects that match this query.\nEither options.success or options.error is called when the count\ncompletes.",
            "line": " js\\parse-1.4.2.js:8386"
        },
        {
            "message": "Missing item type\nRetrieves at most one Parse.Object that satisfies this query.\n\nEither options.success or options.error is called when it completes.\nsuccess is passed the object if there is one. otherwise, undefined.",
            "line": " js\\parse-1.4.2.js:8422"
        },
        {
            "message": "Missing item type\nReturns a new instance of Parse.Collection backed by this query.",
            "line": " js\\parse-1.4.2.js:8467"
        },
        {
            "message": "Missing item type\nSets the number of results to skip before returning any results.\nThis is useful for pagination.\nDefault is to skip zero results.",
            "line": " js\\parse-1.4.2.js:8487"
        },
        {
            "message": "Missing item type\nSets the limit of the number of results to return. The default limit is\n100, with a maximum of 1000 results being returned at a time.",
            "line": " js\\parse-1.4.2.js:8499"
        },
        {
            "message": "Missing item type\nAdd a constraint to the query that requires a particular key's value to\nbe equal to the provided value.",
            "line": " js\\parse-1.4.2.js:8510"
        },
        {
            "message": "Missing item type\nHelper for condition queries",
            "line": " js\\parse-1.4.2.js:8526"
        },
        {
            "message": "Missing item type\nAdd a constraint to the query that requires a particular key's value to\nbe not equal to the provided value.",
            "line": " js\\parse-1.4.2.js:8538"
        },
        {
            "message": "Missing item type\nAdd a constraint to the query that requires a particular key's value to\nbe less than the provided value.",
            "line": " js\\parse-1.4.2.js:8550"
        },
        {
            "message": "Missing item type\nAdd a constraint to the query that requires a particular key's value to\nbe greater than the provided value.",
            "line": " js\\parse-1.4.2.js:8562"
        },
        {
            "message": "Missing item type\nAdd a constraint to the query that requires a particular key's value to\nbe less than or equal to the provided value.",
            "line": " js\\parse-1.4.2.js:8574"
        },
        {
            "message": "Missing item type\nAdd a constraint to the query that requires a particular key's value to\nbe greater than or equal to the provided value.",
            "line": " js\\parse-1.4.2.js:8586"
        },
        {
            "message": "Missing item type\nAdd a constraint to the query that requires a particular key's value to\nbe contained in the provided list of values.",
            "line": " js\\parse-1.4.2.js:8598"
        },
        {
            "message": "Missing item type\nAdd a constraint to the query that requires a particular key's value to\nnot be contained in the provided list of values.",
            "line": " js\\parse-1.4.2.js:8610"
        },
        {
            "message": "Missing item type\nAdd a constraint to the query that requires a particular key's value to\ncontain each one of the provided list of values.",
            "line": " js\\parse-1.4.2.js:8622"
        },
        {
            "message": "Missing item type\nAdd a constraint for finding objects that contain the given key.",
            "line": " js\\parse-1.4.2.js:8635"
        },
        {
            "message": "Missing item type\nAdd a constraint for finding objects that do not contain a given key.",
            "line": " js\\parse-1.4.2.js:8645"
        },
        {
            "message": "Missing item type\nAdd a regular expression constraint for finding string values that match\nthe provided regular expression.\nThis may be slow for large datasets.",
            "line": " js\\parse-1.4.2.js:8655"
        },
        {
            "message": "Missing item type\nAdd a constraint that requires that a key's value matches a Parse.Query\nconstraint.",
            "line": " js\\parse-1.4.2.js:8678"
        },
        {
            "message": "Missing item type\nAdd a constraint that requires that a key's value not matches a\nParse.Query constraint.",
            "line": " js\\parse-1.4.2.js:8693"
        },
        {
            "message": "Missing item type\nAdd a constraint that requires that a key's value matches a value in\nan object returned by a different Parse.Query.",
            "line": " js\\parse-1.4.2.js:8709"
        },
        {
            "message": "Missing item type\nAdd a constraint that requires that a key's value not match a value in\nan object returned by a different Parse.Query.",
            "line": " js\\parse-1.4.2.js:8727"
        },
        {
            "message": "Missing item type\nAdd constraint that at least one of the passed in queries matches.",
            "line": " js\\parse-1.4.2.js:8745"
        },
        {
            "message": "Missing item type\nConverts a string into a regex that matches it.\nSurrounding with \\Q .. \\E does this, we just need to escape \\E's in\nthe text separately.",
            "line": " js\\parse-1.4.2.js:8759"
        },
        {
            "message": "Missing item type\nAdd a constraint for finding string values that contain a provided\nstring.  This may be slow for large datasets.",
            "line": " js\\parse-1.4.2.js:8768"
        },
        {
            "message": "Missing item type\nAdd a constraint for finding string values that start with a provided\nstring.  This query will use the backend index, so it will be fast even\nfor large datasets.",
            "line": " js\\parse-1.4.2.js:8780"
        },
        {
            "message": "Missing item type\nAdd a constraint for finding string values that end with a provided\nstring.  This will be slow for large datasets.",
            "line": " js\\parse-1.4.2.js:8793"
        },
        {
            "message": "Missing item type\nSorts the results in ascending order by the given key.",
            "line": " js\\parse-1.4.2.js:8805"
        },
        {
            "message": "Missing item type\nSorts the results in ascending order by the given key, \nbut can also add secondary sort descriptors without overwriting _order.",
            "line": " js\\parse-1.4.2.js:8817"
        },
        {
            "message": "Missing item type\nSorts the results in descending order by the given key.",
            "line": " js\\parse-1.4.2.js:8839"
        },
        {
            "message": "Missing item type\nSorts the results in descending order by the given key,\nbut can also add secondary sort descriptors without overwriting _order.",
            "line": " js\\parse-1.4.2.js:8851"
        },
        {
            "message": "Missing item type\nAdd a proximity based constraint for finding objects with key point\nvalues near the point given.",
            "line": " js\\parse-1.4.2.js:8875"
        },
        {
            "message": "Missing item type\nAdd a proximity based constraint for finding objects with key point\nvalues near the point given and within the maximum distance given.",
            "line": " js\\parse-1.4.2.js:8891"
        },
        {
            "message": "Missing item type\nAdd a proximity based constraint for finding objects with key point\nvalues near the point given and within the maximum distance given.\nRadius of earth used is 3958.8 miles.",
            "line": " js\\parse-1.4.2.js:8906"
        },
        {
            "message": "Missing item type\nAdd a proximity based constraint for finding objects with key point\nvalues near the point given and within the maximum distance given.\nRadius of earth used is 6371.0 kilometers.",
            "line": " js\\parse-1.4.2.js:8920"
        },
        {
            "message": "Missing item type\nAdd a constraint to the query that requires a particular key's\ncoordinates be contained within a given rectangular geographic bounding\nbox.",
            "line": " js\\parse-1.4.2.js:8934"
        },
        {
            "message": "Missing item type\nInclude nested Parse.Objects for the provided key.  You can use dot\nnotation to specify which fields in the included object are also fetched.",
            "line": " js\\parse-1.4.2.js:8956"
        },
        {
            "message": "Missing item type\nRestrict the fields of the returned Parse.Objects to include only the\nprovided keys.  If this is called multiple times, then all of the keys\nspecified in each of the calls will be included.",
            "line": " js\\parse-1.4.2.js:8974"
        },
        {
            "message": "Missing item type\nIterates over each result of a query, calling a callback for each one. If\nthe callback returns a promise, the iteration will not continue until\nthat promise has been fulfilled. If the callback returns a rejected\npromise, then iteration will stop with that error. The items are\nprocessed in an unspecified order. The query may not have any sort order,\nand may not use limit or skip.",
            "line": " js\\parse-1.4.2.js:8994"
        },
        {
            "message": "Missing item type\nProvides a set of utilities for using Parse with Facebook.",
            "line": " js\\parse-1.4.2.js:9133"
        },
        {
            "message": "Missing item type\nInitializes Parse Facebook integration.  Call this function after you\nhave loaded the Facebook Javascript SDK with the same parameters\nas you would pass to<code>\n<a href=\n\"https://developers.facebook.com/docs/reference/javascript/FB.init/\">\nFB.init()</a></code>.  Parse.FacebookUtils will invoke FB.init() for you\nwith these arguments.",
            "line": " js\\parse-1.4.2.js:9139"
        },
        {
            "message": "Missing item type\nGets whether the user has their account linked to Facebook.",
            "line": " js\\parse-1.4.2.js:9173"
        },
        {
            "message": "Missing item type\nLogs in a user using Facebook. This method delegates to the Facebook\nSDK to authenticate the user, and then automatically logs in (or\ncreates, in the case where it is a new user) a Parse.User.",
            "line": " js\\parse-1.4.2.js:9185"
        },
        {
            "message": "Missing item type\nLinks Facebook to an existing PFUser. This method delegates to the\nFacebook SDK to authenticate the user, and then automatically links\nthe account to the Parse.User.",
            "line": " js\\parse-1.4.2.js:9212"
        },
        {
            "message": "Missing item type\nUnlinks the Parse.User from a Facebook account.",
            "line": " js\\parse-1.4.2.js:9241"
        },
        {
            "message": "Missing item type\n// The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n// Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(windowOverride) {\n      var loc = windowOverride ? windowOverride.location : window.location;\n      var match = loc.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n// Get the cross-browser normalized URL fragment, either from the URL,\n    // the hash, or the override.\n    getFragment: function(fragment, forcePushState) {\n      if (Parse._isNullOrUndefined(fragment)) {\n        if (this._hasPushState || forcePushState) {\n          fragment = window.location.pathname;\n          var search = window.location.search;\n          if (search) {\n            fragment += search;\n          }\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      if (!fragment.indexOf(this.options.root)) {\n        fragment = fragment.substr(this.options.root.length);\n      }\n      return fragment.replace(routeStripper, '');\n    },\n/**\n     * Start the hash change handling, returning `true` if the current\n     * URL matches an existing route, and `false` otherwise.",
            "line": " js\\parse-1.4.2.js:9297"
        },
        {
            "message": "Missing item type\n/**\n     * Initialize is an empty function by default. Override it with your own\n     * initialization logic.",
            "line": " js\\parse-1.4.2.js:9555"
        },
        {
            "message": "Missing item type\nManually bind a single named route to a callback. For example:\n\n<pre>this.route('search/:query/p:num', 'search', function(query, num) {\n      ...\n    });</pre>",
            "line": " js\\parse-1.4.2.js:9563"
        },
        {
            "message": "Missing item type\nWhenever you reach a point in your application that you'd\nlike to save as a URL, call navigate in order to update the\nURL. If you wish to also call the route function, set the \ntrigger option to true. To update the URL without creating\nan entry in the browser's history, set the replace option\nto true.",
            "line": " js\\parse-1.4.2.js:9589"
        },
        {
            "message": "Missing item type",
            "line": " js\\parse-1.4.2.js:9648"
        },
        {
            "message": "Missing item type\nMakes a call to a cloud function.",
            "line": " js\\parse-1.4.2.js:9658"
        },
        {
            "message": "Missing item type\nContains functions to deal with Push in Parse",
            "line": " js\\parse-1.4.2.js:9694"
        },
        {
            "message": "Missing item type\nSends a push notification.",
            "line": " js\\parse-1.4.2.js:9701"
        }
    ]
}