YUI.add("yuidoc-meta", function(Y) {
   Y.YUIDoc = { meta: {
    "classes": [
        "Chats",
        "ChatsAddCtrl",
        "ChatsBuy",
        "ChatsCtrl",
        "ChatsDetailCtrl",
        "Contains functions for calling and declaring\n<a href=\"/docs/cloud_code_guide#functions\">cloud functions</a>.\n<p><strong><em>\n  Some functions are only available from Cloud Code.\n</em></strong></p>.<p>A fork of Backbone.Router, provided for your convenience.\nFor more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Router\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
        "Provides a set of utilities for using Parse with Facebook..<p>A fork of Backbone.History, provided for your convenience.  If you \nuse this class, you must also include jQuery, or another library \nthat provides a jQuery-compatible $ function.  For more information,\nsee the <a href=\"http://documentcloud.github.com/backbone/#History\">\nBackbone documentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
        "Provides a set of utilities for using Parse with Facebook..<p>Parse.Query defines a query that is used to fetch Parse.Objects. The\nmost common use case is finding all objects that match a query through the\n<code>find</code> method. For example, this sample code fetches all objects\nof class <code>MyClass</code>. It calls a different function depending on\nwhether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.find({\n  success: function(results) {\n    // results is an array of Parse.Object.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to retrieve a single object whose id is\nknown, through the get method. For example, this sample code fetches an\nobject of class <code>MyClass</code> and id <code>myId</code>. It calls a\ndifferent function depending on whether the fetch succeeded or not.\n\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.get(myId, {\n  success: function(object) {\n    // object is an instance of Parse.Object.\n  },\n\n  error: function(object, error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>\n\n<p>A Parse.Query can also be used to count the number of objects that match\nthe query without retrieving all of those objects. For example, this\nsample code counts the number of objects of the class <code>MyClass</code>\n<pre>\nvar query = new Parse.Query(MyClass);\nquery.count({\n  success: function(number) {\n    // There are number instances of MyClass.\n  },\n\n  error: function(error) {\n    // error is an instance of Parse.Error.\n  }\n});</pre></p>",
        "Provides an interface to Parse's logging and analytics backend..<p>\nA class that is used to access all of the children of a many-to-many\nrelationship.  Each instance of Parse.Relation is associated with a\nparticular parent object and key.\n</p>",
        "Provides an interface to Parse's logging and analytics backend..<p>A Parse.Session object is a local representation of a revocable session.\nThis class is a subclass of a Parse.Object, and retains the same\nfunctionality of a Parse.Object.</p>",
        "Provides an interface to Parse's logging and analytics backend..<p>A Parse.User object is a local representation of a user persisted to the\nParse cloud. This class is a subclass of a Parse.Object, and retains the\nsame functionality of a Parse.Object, but also extends it with various\nuser specific methods, like authentication, signing up, and validation of\nuniqueness.</p>",
        "Provides an interface to Parse's logging and analytics backend..<p>A fork of Backbone.View, provided for your convenience.  If you use this\nclass, you must also include jQuery, or another library that provides a\njQuery-compatible $ function.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#View\">Backbone\ndocumentation</a>.</p>\n<p><strong><em>Available in the client SDK only.</em></strong></p>",
        "Provides an interface to Parse's logging and analytics backend..<p>An ACL, or Access Control List can be added to any\n<code>Parse.Object</code> to restrict access to only a subset of users\nof your application.</p>",
        "Provides an interface to Parse's logging and analytics backend..<p>Class used for all objects passed to error callbacks.</p>",
        "Provides an interface to Parse's logging and analytics backend..<p>Parse.Events is a fork of Backbone's Events module, provided for your\nconvenience.</p>\n\n<p>A module that can be mixed in to any object in order to provide\nit with custom events. You may bind callback functions to an event\nwith `on`, or remove these functions with `off`.\nTriggering an event fires all callbacks in the order that `on` was\ncalled.\n\n<pre>\n    var object = {};\n    _.extend(object, Parse.Events);\n    object.on('expand', function(){ alert('expanded'); });\n    object.trigger('expand');</pre></p>\n\n<p>For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Events\">Backbone\ndocumentation</a>.</p>",
        "Provides an interface to Parse's logging and analytics backend..<p>Provides a standard collection class for our sets of models, ordered\nor unordered.  For more information, see the\n<a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone\ndocumentation</a>.</p>",
        "Provides an interface to Parse's logging and analytics backend..<p>Represents a latitude / longitude point that may be associated\nwith a key in a ParseObject or used as a reference point for geo queries.\nThis allows proximity-based queries on the key.</p>\n\n<p>Only one key in a class may contain a GeoPoint.</p>\n\n<p>Example:<pre>\n  var point = new Parse.GeoPoint(30.0, -20.0);\n  var object = new Parse.Object(\"PlaceObject\");\n  object.set(\"location\", point);\n  object.save();</pre></p>",
        "Provides an interface to Parse's logging and analytics backend..<p>The fundamental unit of Parse data, which implements the Backbone Model\ninterface.</p>",
        "Provides an interface to Parse's logging and analytics backend..A Parse.Op is an atomic operation that can be applied to a field in a\nParse.Object. For example, calling <code>object.set(\"foo\", \"bar\")</code>\nis an example of a Parse.Op.Set. Calling <code>object.unset(\"foo\")</code>\nis a Parse.Op.Unset. These operations are stored in a Parse.Object and\nsent to the server as part of <code>object.save()</code> operations.\nInstances of Parse.Op should be immutable.\n\nYou should not create subclasses of Parse.Op or instantiate Parse.Op\ndirectly.",
        "Provides an interface to Parse's logging and analytics backend..A Parse.Role is a local representation of a role persisted to the Parse\ncloud.",
        "Provides an interface to Parse's logging and analytics backend..A Relation operation indicates that the field is an instance of\nParse.Relation, and objects are being added to, or removed from, that\nrelation.",
        "Provides an interface to Parse's logging and analytics backend..A Set operation indicates that either the field was changed using\nParse.Object.set, or it is a mutable container that was detected as being\nchanged.",
        "Provides an interface to Parse's logging and analytics backend..Add is an atomic operation where the given objects will be appended to the\narray that is stored in this field.",
        "Provides an interface to Parse's logging and analytics backend..AddUnique is an atomic operation where the given items will be appended to\nthe array that is stored in this field only if they were not already\npresent in the array.",
        "Provides an interface to Parse's logging and analytics backend..An Increment is an atomic operation where the numeric value for the field\nwill be increased by a given amount.",
        "Provides an interface to Parse's logging and analytics backend..An Unset operation indicates that this field has been deleted from the\nobject.",
        "Provides an interface to Parse's logging and analytics backend..Parse.Config is a local representation of configuration data that\ncan be set from the Parse dashboard.",
        "Provides an interface to Parse's logging and analytics backend..Remove is an atomic operation where the given objects will be removed from\nthe array that is stored in this field.",
        "Usuarios",
        null
    ],
    "modules": [],
    "allModules": []
} };
});